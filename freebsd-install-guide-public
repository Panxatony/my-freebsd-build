################################################################################
##----------------------------------------------------------------------------##
##                   FreeBSD 9.1 Release Installation Notes                   ##
##----------------------------------------------------------------------------##
################################################################################
# This guide covers everything I did to setup my FreeBSD Server. I will cover
# the following key areas
#
# - Pkg setup and ports installation mostly with portmaster
# - Setup utilities such as OpenNTPD for time and NUT for UPS monitoring
# - OpenSMTPD for external emailing of periodic emails (including IPMI checks)
# - ZFS setup for AF 4K drives and snapshotting script
# - Mostly jail friendly NFSv4 (with v2/v3 support commented)
# - Ezjail setup split to DMZ/LAN segments with syslog to host system
# - Basic FTP/iRedMail/Serviio/Owncloud/Puppet jails
#
# This version is slightly modified to remove any passwords, IPs, or domain
# names that may be sensitive. For the most part, if you use a find/replace on
# the find and replace section and the initial configuration section you can
# probably copy and paste most of what you see here straight into a terminal. 
#
# Written in 2012-2013 by Jason Unovitch
#   jason.unovitch@gmail.com
#   https://github.com/junovitch
#
# To the extent possible under law, the author(s) have dedicated all copyright
# and related and neighboring rights to this software to the public domain
# worldwide. This software is distributed without any warranty.
#
# You should have received a copy of the CC0 Public Domain Dedication along with
# this software. If not, see http://creativecommons.org/publicdomain/zero/1.0/
#
################################################################################
##----------------------------------------------------------------------------##
##                       Install Notes (TRIM Support)                         ##
##----------------------------------------------------------------------------##
################################################################################
#
# If using an SSD, be sure to enable TRIM support during the install. This
# can be done during the initial partitioning if doing it manually. Otherwise
# drop to a shell post install or boot into single user mode and enter the
# below commands for the data partition.
#
# SU+J will also be disabled as the journaling may not be needed on SSDs.
#
# mount
# tunefs -t enable /dev/ada0p2
# tunefs -j disable /dev/ada0p2
# reboot
#
# Some info can be found on the forums
# http://forums.freebsd.org/showthread.php?t=28004
# And here
# http://www.wonkity.com/~wblock/docs/html/ssd.html
#
# If not using and SSD this is not needed.
#
################################################################################
##----------------------------------------------------------------------------##
##                       Initial Configuration Section                        ##
##----------------------------------------------------------------------------##
################################################################################
# We're going to erase the current rc.conf and build our own. You should review
# this listing closely and do a find and replace to change IPs prefixes and 
# the domain name now. This information will repeat several times as we go
# through the guide. Once all the addresses are valid, copy-paste up until the
# 'EOF' marker.
#
# The rc.conf contains descriptive information about the local host name,
# configuration details for any potential network interfaces and which services
# should be started up at system intial boot time. You can get a good idea what
# runs on a system by reviewing this file. If you are new to FreeBSD, you may
# want to start with `man rc.conf` and review that page. One thing to note is
# you can often do `man **.conf` on many files and learn how they should be
# configured.
################################################################################

# First enable multiple routing tables (FIBs) 
echo 'net.fibs=4' >> /boot/loader.conf
echo 'net.add_addr_allfibs=0' >> /boot/loader.conf

cat > /etc/rc.conf << 'EOF'
# General System Config
# Set dumpdev to "AUTO" to enable crash dumps, "NO" to disable
dumpdev="AUTO"
fsck_y_enable="YES"
powerd_enable="YES"

# General Network Configuration
hostname="xts-bsd.pa-us.mydomain.name"
sshd_enable="YES"
static_routes="dmzfibnetwork dmzfibdefault internal lanfibnetwork lanfibdefault"
ipv6_static_routes="dmzfibnetwork dmzfibdefault internal lanfibnetwork lanfibdefault"

# DMZ/External Interface Configuration
ifconfig_em0="DHCP"
ifconfig_em0_ipv6="inet6 accept_rtadv"
ifconfig_em0_alias0="inet 192.168.102.11/32 fib 2"		# ms1.pa-us.mydomain.name
ifconfig_em0_alias1="inet6 2001:123:4567:890::11/128 fib 2"	# ms1.pa-us.mydomain.name
ifconfig_em0_alias2="inet 192.168.102.12/32 fib 2"		# ms2.pa-us.mydomain.name
ifconfig_em0_alias3="inet6 2001:123:4567:890::12/128 fib 2"	# ms2.pa-us.mydomain.name
ifconfig_em0_alias4="inet 192.168.102.13/32 fib 2"		# www1.pa-us.mydomain.name
ifconfig_em0_alias5="inet6 2001:123:4567:890::13/128 fib 2"	# www1.pa-us.mydomain.name
ifconfig_em0_alias6="inet 192.168.102.14/32 fib 2"		# www2.pa-us.mydomain.name
ifconfig_em0_alias7="inet6 2001:123:4567:890::14/128 fib 2"	# www2.pa-us.mydomain.name
ifconfig_em0_alias8="inet 192.168.102.15/32 fib 2"		# unused
ifconfig_em0_alias9="inet6 2001:123:4567:890::15/128 fib 2"	# unused
ifconfig_em0_alias10="inet 192.168.102.16/32 fib 2"		# unused
ifconfig_em0_alias11="inet6 2001:123:4567:890::16/128 fib 2"	# unused
ifconfig_em0_alias12="inet 192.168.102.17/32 fib 2"		# unused
ifconfig_em0_alias13="inet6 2001:123:4567:890::17/128 fib 2"	# unused
ifconfig_em0_alias14="inet 192.168.102.18/32 fib 2"		# unused
ifconfig_em0_alias15="inet6 2001:123:4567:890::18/128 fib 2"	# unused
ifconfig_em0_alias16="inet 192.168.102.19/32"			# vpn.pa-us.mydomain.name
ifconfig_em0_alias17="inet6 2001:123:4567:890::19/128"		# vpn.pa-us.mydomain.name
route_dmzfibnetwork="-net 192.168.102.0/24 -interface em0 -fib 2"
route_dmzfibdefault="default 192.168.102.1 -fib 2"
ipv6_route_dmzfibnetwork="-net 2001:123:4567:890::/64 -interface em0 -fib 2"
ipv6_route_dmzfibdefault="default 2001:123:4567:890::1 -fib 2"

# LAN/Internal Interface Configuration
ifconfig_em1="inet 10.100.102.2/24"
ifconfig_em1_ipv6="inet6 2001:123:4:5678::2/64"
ifconfig_em1_alias0="inet 10.100.102.11/32 fib 1"		# apps1.pa-us.mydomain.name
ifconfig_em1_alias1="inet6 2001:123:4:5678::11/128 fib 1"	# apps1.pa-us.mydomain.name
ifconfig_em1_alias2="inet 10.100.102.12/32 fib 1"		# apps2.pa-us.mydomain.name
ifconfig_em1_alias3="inet6 2001:123:4:5678::12/128 fib 1"	# apps2.pa-us.mydomain.name
ifconfig_em1_alias4="inet 10.100.102.13/32 fib 1"		# ftp.pa-us.mydomain.name
ifconfig_em1_alias5="inet6 2001:123:4:5678::13/128 fib 1"	# ftp.pa-us.mydomain.name
ifconfig_em1_alias6="inet 10.100.102.14/32 fib 1"		# serviio.pa-us.mydomain.name
ifconfig_em1_alias7="inet6 2001:123:4:5678::14/128 fib 1"	# serviio.pa-us.mydomain.name
ifconfig_em1_alias8="inet 10.100.102.15/32 fib 1"		# lanser.pa-us.mydomain.name
ifconfig_em1_alias9="inet6 2001:123:4:5678::15/128 fib 1"	# lanser.pa-us.mydomain.name
ifconfig_em1_alias10="inet 10.100.102.16/32 fib 1"		# unused
ifconfig_em1_alias11="inet6 2001:123:4:5678::16/128 fib 1"	# unused
ifconfig_em1_alias12="inet 10.100.102.17/32 fib 1"		# pdbi.pa-us.mydomain.name
ifconfig_em1_alias13="inet6 2001:123:4:5678::17/128 fib 1"	# pdbi.pa-us.mydomain.name
ifconfig_em1_alias14="inet 10.100.102.18/32 fib 1"		# mdbi.pa-us.mydomain.name
ifconfig_em1_alias15="inet6 2001:123:4:5678::18/128 fib 1"	# mdbi.pa-us.mydomain.name
ifconfig_em1_alias16="inet 10.100.102.19/32"			# vpn.pa-us.mydomain.name
ifconfig_em1_alias17="inet6 2001:123:4:5678::19/128"		# vpn.pa-us.mydomain.name
route_internal="-net 10.100.0.0/16 10.100.102.1"
route_lanfibnetwork="-net 10.100.102.0/24 -interface em1 -fib 1"
route_lanfibdefault="default 10.100.102.1 -fib 1"
ipv6_route_internal="-net 2001:987:6:543::/64 2001:123:4:5678::1"
ipv6_route_lanfibnetwork="-net 2001:123:4:5678::/64 -interface em1 -fib 1"
ipv6_route_lanfibdefault="default 2001:123:4:5678::1 -fib 1"

# Syslog Configuration, bind (-b) to LAN Internal address
syslogd_enable="YES"
syslogd_flags="-v -v -b 10.100.102.2:syslog"

# NTPDATE Support for initial time sync during boot
ntpdate_enable="YES"
ntpdate_hosts="192.168.102.1"
'EOF'

################################################################################
# Without the changes to using multiple routing fibs, the following would be
# enough. However, a reboot will be required at this point.
#
# hostname xts-bsd.pa-us.mydomain.name
# service powerd restart
# service netif restart
# service syslogd restart
################################################################################

shutdown -r now

################################################################################
# User Add examples
################################################################################

pw groupadd -n unovitch -g 2194
pw useradd -m -n jason -c "Jason Unovitch,,," -u 1986 -g unovitch -G wheel -s /bin/tcsh
passwd jason

################################################################################
##----------------------------------------------------------------------------##
##               Configure General Programs for Host System Use               ##
##----------------------------------------------------------------------------##
################################################################################
# Let's get an initial ports tree for any installs from source. After this point
# you only have to `portsnap fetch update` to keep everything in check.
#
# http://www5.us.freebsd.org/doc/en_US.ISO8859-1/books/handbook/updating-upgrading-portsnap.html
################################################################################

portsnap fetch extract

################################################################################
# PKG support per instructions in the official package announcement.
#
# http://lists.freebsd.org/pipermail/freebsd-pkg/2013-October/000107.html
# http://www5.us.freebsd.org/doc/en_US.ISO8859-1/books/handbook/pkgng-intro.html
################################################################################

pkg
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf
pkg2ng

# FreeBSD 9 only, this is done on 10
echo 'WITH_PKGNG=yes' >> /etc/make.conf
rm /usr/local/etc/pkg.conf
mkdir -p /usr/local/etc/pkg/repos
cat > /usr/local/etc/pkg/repos/FreeBSD.conf << 'EOF'
FreeBSD: {
  url: "http://pkg.FreeBSD.org/${ABI}/latest",
  mirror_type: "srv",
  enabled: yes
}
'EOF'

cat >> /etc/periodic.conf << 'EOF'
##### Package related checks
daily_backup_pkgdb_enable="NO"
daily_status_security_pkg_checksum_enable="YES"
'EOF'

################################################################################
# Portmaster - A powerful tool for managing installs, upgrades, and removal
# of unused ports.
# http://www5.us.freebsd.org/doc/en_US.ISO8859-1/books/handbook/ports-using.html
# http://www.cyberciti.biz/faq/freebsd-updating-software-ports-applications/ 
# Examples:
#    `portmaster -L` to show what can be updated
#    `portmaster port_name` to install or update one port only
#    `portmaster -a` to update all (-a) installed ports
#    `portmaster -fa` to force update of all installed ports
#    `portmaster -e port_name` to expunge (-e) a port and all dependencies
#    `portmaster -s` to remove stale (-s) ports no longer depended on
#    `portmaster` while in a /usr/ports/ directory to install that port
#    `rm /var/db/portsnap/tag && rm -rf /var/db/portsnap/files && portsnap fetch extract`
#	to completely blow away all portsnap cached files and start fresh
################################################################################

pkg install ports-mgmt/portmaster

################################################################################
# Portdowngrade - Useful if an upgrade port doesn't work as intended and needs
# to be downgraded to an old version.
################################################################################

pkg install ports-mgmt/portdowngrade

################################################################################
# Tmux - Separates the terminal from the current login. Useful if an SSH link
# gets broken during an install or you have to leave. Whatever is running
# will keep running.
################################################################################

pkg install sysutils/tmux
rehash
tmux

################################################################################
# Bash - GNU Bourne Again Shell required for some ports and install scripts.
################################################################################

pkg install shells/bash

################################################################################
# Perl - Used for misc editing tasks and various programs.
################################################################################

pkg install lang/perl5.16

################################################################################
# OpenNTPD - Used for upkeep of time
#
# Perl in-place edits are used to change from the default pool.ntp.org servers
# to using the default gateway for NTP.
################################################################################

pkg install net/openntpd

perl -pwi -e 's^servers pool.ntp.org^servers us.pool.ntp.org^' /usr/local/etc/ntpd.conf
perl -pwi -e 's^#listen on \*^listen on 10.100.102.2\nlisten on 2001:123:4:5678::2^' /usr/local/etc/ntpd.conf

echo '' >> /etc/rc.conf
echo '# OpenNTPD Support for upkeep of time' >> /etc/rc.conf
echo 'openntpd_enable="YES"' >> /etc/rc.conf

service openntpd start

################################################################################
# OpenSMTPD - Simple and secure email MTA used for system notification emails.
#
# The guide link below is very helpful, but check `man smtpd.conf` for
# examples on the syntax to use as this is a bit dated. If you use an address
# other than @gmail.com checking the man page will probably be required.
#
# https://cooltrainer.org/2012/06/06/external-mailing-on-freebsd/
#
# Also see this link for notes and examples on the new syntax as of Jan 2013
# http://forums.freebsd.org/showthread.php?t=36745
################################################################################

pkg install mail/opensmtpd

cd /usr/local/etc/mail/

cat > smtpd.conf << 'EOF'
# This is the smtpd server system-wide configuration file.
# See smtpd.conf(5) for more information.

# To accept external mail, replace with: listen on all
listen on 10.100.102.2
listen on 2001:123:4:5678::2

# If you edit the file, you have to run "smtpctl update table aliases"
table aliases file:/etc/mail/aliases
table secrets db:/usr/local/etc/mail/secrets.db
table trusted_IPs { 10.100.0.0/16, 2001:987:6:543::/64, 2001:123:4:5678::/64 }

# Uncomment the following to accept external mail for domain "example.org"
#accept from any for domain "example.org" alias <aliases> deliver to mbox
accept for local alias <aliases> deliver to mbox
accept from local for domain "gmail.com" relay via tls+auth://gmail_login@smtp.gmail.com:587 auth <secrets>
accept from source <trusted_IPs> for domain "mydomain.name" alias <aliases> deliver to mbox
'EOF'

touch secrets
chmod 640 secrets
chown root:_smtpd secrets
echo 'gmail_login  jason.unovitch:CHANGETHISTOTHEPASSWORD' >> secrets
/usr/local/libexec/opensmtpd/makemap secrets

perl -pwi -e 's^# root:\tme\@my.domain^root:\tjason.unovitch\@gmail.com^' /etc/mail/aliases
smtpctl update table aliases

echo '' >> /etc/rc.conf
echo '# Disable Sendmail MTA' >> /etc/rc.conf
echo 'sendmail_enable="NO"' >> /etc/rc.conf
echo 'sendmail_submit_enable="NO"' >> /etc/rc.conf
echo 'sendmail_outbound_enable="NO"' >> /etc/rc.conf
echo 'sendmail_msp_queue_enable="NO"' >> /etc/rc.conf
echo '' >> /etc/rc.conf
echo '# Enable OpenSMTPD MTA' >> /etc/rc.conf
echo 'smtpd_enable="YES"' >> /etc/rc.conf

service sendmail stop
service smtpd start

echo "Test message" | mail -s "Test Email" root

################################################################################
# OpenVPN Certificate Authority
################################################################################

pkg install security/openvpn

cp -Rv /usr/local/share/easy-rsa/ /usr/local/etc/openvpn-ca
cd /usr/local/etc/openvpn-ca

perl -pwi -e 's^KEY_PROVINCE=.*^KEY_PROVINCE="PA"^g' vars
perl -pwi -e 's^KEY_SIZE=.*^KEY_SIZE=2048^g' vars
perl -pwi -e 's^KEY_CITY=.*^KEY_CITY="Someplace"^g' vars
perl -pwi -e 's^KEY_ORG=.*^KEY_ORG="SomethingSomewhere"^g' vars
perl -pwi -e 's^KEY_EMAIL="\b\w+.*?"^KEY_EMAIL="jason.unovitch\@gmail.com"^g' vars
perl -pwi -e 's^KEY_EMAIL=\b\w+.*^KEY_EMAIL=jason.unovitch\@gmail.com^' vars
perl -pwi -e 's^KEY_CN=.*^KEY_CN=SomethingSomewhere^' vars
perl -pwi -e 's^KEY_NAME=.*^KEY_NAME=SomethingSomewhere^' vars
perl -pwi -e 's^KEY_OU=.*^KEY_OU=SomethingSomewhere^' vars
perl -pwi -e 's^PKCS11_MODULE_PATH=.*^PKCS11_MODULE_PATH=SomethingSomewhere^' vars
perl -pwi -e 's^PKCS11_PIN=.*^PKCS11_PIN=1234^' vars
perl -pwi.interact -e 's^ --interact^^g' build-ca build-key

bash
. ./vars
./clean-all
./build-dh
export KEY_CN=xts-bsd.pa-us.mydomain.name && export KEY_NAME=xts-bsd.pa-us.mydomain.name && ./build-ca
export KEY_CN=vpn.pa-us.mydomain.name && export KEY_NAME=vpn.pa-us.mydomain.name && ./build-key-server vpn.pa-us.mydomain.name
export KEY_CN=xts-rtr.pa-us.mydomain.name && export KEY_NAME=xts-rtr.pa-us.mydomain.name && ./build-key-server xts-rtr.pa-us.mydomain.name
export KEY_CN=xju-rtr.nc-us.mydomain.name && export KEY_NAME=xju-rtr.nc-us.mydomain.name && ./build-key xju-rtr.nc-us.mydomain.name

/usr/local/sbin/openvpn --genkey --secret keys/ta.key

scp keys/dh2048.pem root@xts-rtr:/usr/local/etc/openvpn/keys

scp keys/ca.crt root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/ca.crt root@xju-rtr:/usr/local/etc/openvpn/keys

scp keys/ta.key root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/ta.key root@xju-rtr:/usr/local/etc/openvpn/keys

scp keys/xts-rtr.* root@xts-rtr:/usr/local/etc/openvpn/keys
scp keys/xju-rtr.* root@xju-rtr:/usr/local/etc/openvpn/keys

################################################################################
# Pstree - Better eye on process associations.
# Use via `pstree`
################################################################################

pkg install sysutils/pstree

################################################################################
# Iftop - useful tool for network monitoring, more details than `systat -ifs`
# Use via `iftop -i em1` or `iftop -i em0`
################################################################################

pkg install net-mgmt/iftop

################################################################################
# Cmdwatch - Repeat a command every few seconds for monitoring/testing.
# Use via `cmdwatch`
################################################################################

pkg install sysutils/cmdwatch 

################################################################################
# Tree - For displaying a more graphical listing of files
# Use via `tree`
################################################################################

pkg install sysutils/tree

################################################################################
# Uprecords - Track uptime trends/percentages.
# Use via `uprecords`
################################################################################

pkg install sysutils/uptimed 

echo '' >> /etc/rc.conf
echo '# Enable Uptimed' >> /etc/rc.conf
echo 'uptimed_enable="YES"' >> /etc/rc.conf

service uptimed start

################################################################################
# BSDStats - Report BSD usage, hardware, and software popularity.
# Recommend agreeing to all defaults during install.
################################################################################

echo '' >> /etc/rc.conf
echo '# Enable BSDStats/FBSDmon' >> /etc/rc.conf
echo '##### Statistics and reporting checks' >> /etc/periodic.conf
pkg install sysutils/bsdstats
pkg install ports-mgmt/fbsdmon
echo 'weekly_fbsdmon_enable="YES"' >> /etc/periodic.conf
echo 'fbsdmon_enable="YES"' >> /etc/rc.conf

################################################################################
# ClamAV - Antivirus
################################################################################

pkg install security/clamav

echo '' >> /etc/rc.conf
echo '# Enable CLAMD' >> /etc/rc.conf
echo 'clamav_freshclam_enable="YES"' >> /etc/rc.conf
echo 'clamav_clamd_enable="YES"' >> /etc/rc.conf

freshclam
service clamav-freshclam start
service clamav-clamd start

################################################################################
# Vim-lite - Handles most text editing, very useful for syntax highlighting.
# Also enable "set nomodeline" per the security note.
################################################################################

pkg install editors/vim-lite

echo 'set nomodeline' >> /etc/skel/.vimrc
echo 'syntax on' >> /etc/skel/.vimrc
cp /etc/skel/.vimrc /root/
cp /etc/skel/.vimrc /home/jason/

################################################################################
# Checkbashisms - Checks for potential Bash specific commands in scripts that
# could cause compatibility issues.
################################################################################

pkg install devel/checkbashisms

################################################################################
# Portlint and Rclint for checking ports and scripts for syntax issues 
################################################################################

pkg install ports-mgmt/portlint devel/rclint

################################################################################
# FreeIPMI Utilities and a basic status check during the daily periodic.
# See `man freeipmi` for more than the what's listed.
################################################################################
 
pkg install sysutils/freeipmi

cat > /usr/local/etc/periodic/daily/990.ipmi-daily.sh << 'EOF'
#!/bin/sh
echo
echo "IPMI Sensor Check"
iout=`/usr/local/sbin/ipmi-sensors --no-header-output --interpret-oem-data \
	| cut -d "|" -f "2 4 5 6" | sed 's/|//g' | awk '{gsub(/^ +|  +$/,"")}1'`
echo "$iout"

echo "$iout" | egrep -v "Presence detected|OK|Low" > /dev/null && rc=1 || rc=0
exit $rc
'EOF'
chmod 555 /usr/local/etc/periodic/daily/990.ipmi-daily.sh

################################################################################
# Nut (Network UPS Tools) - Monitor UPS status and auto-shutdown if necessary
# http://people.freebsd.org/~thierry/nut_FreeBSD_HowTo.txt 
################################################################################

pkg install sysutils/nut

# Still testing as of 31 December, almost there...
# Haven't had the time to actually validate this works properly

echo '' >> /etc/rc.conf
echo '## UPS Monitoring Tools' >> /etc/rc.conf
echo 'nut_enable="YES"' >> /etc/rc.conf
echo 'nut_upslog_enable="YES"' >> /etc/rc.conf
echo 'nut_upsmon_enable="YES"' >> /etc/rc.conf

cd /usr/local/etc/nut
cp ups.conf.sample ups.conf
printf "[UPS]\n" >> ups.conf
printf "\tdriver = snmp-ups\n" >> ups.conf
printf "\tport = xts-ups\n" >> ups.conf
printf "\tcommunity = Uno4snmp\n" >> ups.conf
printf "\tpollfreq = 15\n" >> ups.conf

cp upsd.conf.sample upsd.conf

cp upsd.users.sample upsd.users
printf "# Supervision user\n" >> upsd.users
printf "[admin]\n" >> upsd.users
printf "\tpassword = adminpassword\n" >> upsd.users
printf "\tactions = SET\n" >> upsd.users
printf "\tactions = FSD\n" >> upsd.users
printf "\tinstcmds = ALL\n\n" >> upsd.users
printf "# Protection user\n" >> upsd.users
printf "[monuser]\n" >> upsd.users
printf "\tpassword  = userpassword\n" >> upsd.users
printf "\tupsmon master\n" >> upsd.users

cp upsmon.conf.sample upsmon.conf
echo "MONITOR UPS@localhost 1 monuser userpassword master" >> upsmon.conf

chown uucp /usr/local/etc/nut/*.conf /usr/local/etc/nut/upsd.users
chmod 440 /usr/local/etc/nut/*.conf /usr/local/etc/nut/upsd.users

service nut start
service nut_upslog start
service nut_upsmon start

################################################################################
# Logcheck - Reviews log files.
################################################################################

# Setup
pkg install security/logcheck

# Fix permissions
chown root:logcheck /var/log/auth.log
chmod 640 /var/log/auth.log
perl -pwi -e 's^/var/log/auth\.log\t\t\t600  7     100  \@0101T JC^/var/log/auth.log\troot:logcheck\t640  7     100  \@0101T JC^' /etc/newsyslog.conf

# Redirect logcheck alias to root
perl -pwi -e 's^# General redirections for pseudo accounts^# General redirections for pseudo accounts\nlogcheck:\troot^' /etc/mail/aliases
smtpctl update table aliases

################################################################################
# Iperf
################################################################################

pkg install benchmarks/iperf

################################################################################
# Monitorix for basic system monitoring and Perl SQL module for monitoring DB.
################################################################################

pkg install sysutils/monitorix databases/p5-DBD-mysql
echo '' >> /etc/rc.conf
echo '# Monitorix' >> /etc/rc.conf
echo 'monitorix_enable="YES"' >> /etc/rc.conf

# Bare Minimum Configuration:
# - Run as www user to write graphs to /usr/local/www/monitorix/imgs
# - Bind to LAN Internal IP to be jail friendly
patch -l /usr/local/etc/monitorix.conf << 'EOF'
26c26
< 	host =
---
> 	host = 10.100.102.2
28,29c28,29
< 	user = nobody
< 	group = nobody
---
> 	user = www
> 	group = www
'EOF'

# Update NICs from Linux names to FreeBSD driver names
patch -l /usr/local/etc/monitorix.conf << 'EOF'
225c225
< 	list = eth0
---
> 	list = em0, em1
227c227,228
< 		eth0 = FastEthernet LAN, 0, 10000000
---
> 		em0 = GigabitEthernet DMZ, 0, 10000000
> 		em1 = GigabitEthernet LAN, 0, 10000000
229c230
< 	gateway = eth0
---
> 	gateway = 
'EOF'

# Enable disk monitoring using sysutils/smartmontools and update disk names
patch -l /usr/local/etc/monitorix.conf << 'EOF'
70c70
< 	disk		= n
---
> 	disk		= y
186c186
< 		0 = /dev/sda, /dev/sdb, /dev/sdc
---
> 		0 = /dev/ada0, /dev/ada1, /dev/ada2, /dev/ada3
'EOF'

# General personal preference configuration:
# - Give it a title
# - Turn on show gaps so things like reboots or outages have no data
# - Also change the coloring on those gaps to a light gray rather than white
# - Make detailed graphs bigger
patch -l /usr/local/etc/monitorix.conf << 'EOF'
6c6
< title = Place a title here
---
> title = xts-bsd-lan Monitorix
15c15
< show_gaps = n
---
> show_gaps = y
73c73
< 	serv		= y
---
> 	serv		= n
606c607
< 		gap		= FFFFFF
---
> 		gap		= 202020
617c618
< 	zoom	= 800x300
---
> 	zoom	= 1200x450
'EOF'

# Enable monitoring MySQL database jail
# - The following will need to be done in the jail to allow this:
# CREATE USER 'monitorix'@'10.100.102.18' IDENTIFIED BY 'MY_MONITORIX_PASSWORD';
patch -l /usr/local/etc/monitorix.conf << 'EOF'
81c81
< 	mysql		= n
---
> 	mysql		= y
333,334c334,335
< 	list = localhost
< #	list = /var/lib/mysql/mysql.sock
---
> 	list = 10.100.102.18
> #	list = /tmp/mysql.sock
336c337
< 		localhost = 3306, user, secret
---
> 		10.100.102.18 = 3306, monitorix, MY_MONITORIX_PASSWORD
'EOF'

# Allow monitoring squid in VPN jail
patch -l /usr/local/etc/monitorix.conf << 'EOF'
55c55
< squid_log	= /var/log/squid/access.log
---
> squid_log	= /usr/jails/vpn.pa-us.mydomain.name/var/log/squid/access.log
82c82
< 	squid		= n
---
> 	squid		= y
346c347
< 	cmd = squidclient -h 127.0.0.1
---
> 	cmd = /usr/jails/vpn.pa-us.mydomain.name/usr/local/sbin/squidclient -h 10.100.102.19
'EOF'

# Correct location of CLAMAV log
patch -l /usr/local/etc/monitorix.conf << 'EOF'
53c53
< clamav_log	= /var/log/clamav/clamav.log
---
> clamav_log	= /var/log/clamav/clamd.log
'EOF'

service monitorix start

################################################################################
# Panicmail - Report kernel panics.
################################################################################

pkg install sysutils/panicmail
echo 'panicmail_enable="YES"' >> /etc/rc.conf

################################################################################
# Cleanup periodic messages for readability on a phone.
################################################################################

cat >> /etc/periodic.conf << 'EOF'
##### General formatting
daily_show_success="NO"
security_show_success="NO"
daily_status_security_inline="YES"
weekly_status_security_inline="YES"
monthly_status_security_inline="YES"
##### Remove non-essential checks
daily_status_rwho_enable="NO"
daily_clean_hoststat_enable="NO"
daily_status_network_enable="NO"
##### Disk/filesystem status and maintenance checks
daily_status_disks_enable="NO"
daily_clean_tmps_enable="YES"
'EOF'

################################################################################
# Make all periodic jobs run one hour later. Also add a bi-weekly 
# `freebsd-update` check as well as a `portsnap cron` to keep have a current
# ports files ready to go.
#
# The new /etc/crontab will look like this:
#
# 1	4	*	*	*	root	periodic daily
# 15	5	*	*	6	root	periodic weekly
# 30	6	1	*	*	root	periodic monthly
################################################################################

perl -pwi -e 's/^1\t3/1\t4/' /etc/crontab
perl -pwi -e 's/^15\t4/15\t5/' /etc/crontab
perl -pwi -e 's/^30\t5/30\t6/' /etc/crontab

printf "5\t4\t*\t*\t*\t/usr/sbin/portsnap cron\n" >> /var/cron/tabs/root
printf "30\t5\t*\t*\t2,6\t/usr/sbin/freebsd-update cron\n" >> /var/cron/tabs/root

################################################################################
# Make default syslog sizes a bit bigger and keep more of them
################################################################################

perl -pwi -e 's^100\t^2000\t^' /etc/newsyslog.conf
perl -pwi -e 's^3|5|7\t^9\t^' /etc/newsyslog.conf

################################################################################
##----------------------------------------------------------------------------##
##                  Programs Related to Host System Storage                   ##
##----------------------------------------------------------------------------##
################################################################################
# Smartd package for basic disk management and status checking.  We'll set up
# the smartd.conf for more detailed checks along with sending a notification
# email to root if issues get detected.
# 
# Basic explanation (enter `man smartd.conf` to get more detailed info)
# DEVICESCAN infers checking all drives
# "-I 194 -W 4,35,45" sends emails for changes of 4 degrees, info notices at 
#	35 degrees, and critical message above 45 degrees
# "-s (S/../.././05|L/../../5/06)" runs short check daily at 5AM, long check
#	weekly at 6 am on Friday.
################################################################################

pkg install sysutils/smartmontools

cp /usr/local/etc/smartd.conf.sample /usr/local/etc/smartd.conf
perl -pwi -e 's^\ADEVICESCAN\n^DEVICESCAN -a -o on -S on -I 194 -W 4,35,45 -R 5 -m root -s (S/../.././05|L/../../5/06)\n^' /usr/local/etc/smartd.conf

echo 'daily_status_smart_devices="/dev/ada0 /dev/ada1 /dev/ada2 /dev/ada3"' >> /etc/periodic.conf

echo '' >> /etc/rc.conf
echo '# Smartd disk monitoring' >> /etc/rc.conf
echo 'smartd_enable="YES"' >> /etc/rc.conf

service smartd start

################################################################################
# Rsync
################################################################################

pkg install net/rsync

################################################################################
# Unison
################################################################################

pkg install net/unison-nox11

################################################################################
# Setup of Unison for use
# Prerequisites:
# 1. Generate an SSH key for root.
#    ssh-keygen -t ecdsa -b 521 -C "`whoami`@`hostname`-`date +%Y%m%d`"
# 2. Distribute this out to each host to be synced. In my case, I will put this
#    in my Puppet directory to be automatically distributed.
#    cp /root/.ssh/id_ecdsa.pub /usr/jails/puppet.pa-us.mydomain.name/usr/local/etc/puppet/mint13lts/common/root/.ssh/authorized_keys
# 3. Ensure root login enable on all clients. Update sshd_config to show:
#    PermitRootLogin without-password
#
# Warning:
# This does give root on the FreeBSD host the ability to SSH into each box.
# Protect this accordingly.
################################################################################
# First step is to generate a Unison preference file, this first one will sync
# the /zfs/homedirs across the server and a computer named silverstone.
################################################################################

cat > /root/.unison/syncWAN.prf << 'EOF'
# Unison preferences file for full sync of /zfs/homedirs
root = /zfs/homedirs
root = ssh://silverstone//zfs/homedirs

prefer=newer
owner=true
group=true
fastcheck=true
confirmbigdel=true
auto=true
batch=true
logfile=/var/log/unison-syncWAN.log
'EOF'

################################################################################
# Since a logfile will be created, drop a properly formatted entry into
# /etc/newsyslog.conf to rotate them every day by newsyslog.
################################################################################

printf "/var/log/unison-syncWAN.log\t\t640  9\t   *\t@T00  J\n" >> /etc/newsyslog.conf
printf "/var/log/unison-syncLAN.log\t\t640  9\t   *\t@T00  J\n" >> /etc/newsyslog.conf

################################################################################
# Now echo some jobs into cron for this. The full WAN sync will be daily at 0415
# while the local LAN sync will run every 10 minutes. Crontab entry will first
# grep the process table for an active run and if that fails it will start out
# Unison. All results will be sent to /dev/null.
################################################################################

printf "15\t4\t*\t*\t*\t/bin/pgrep -f 'unison syncWAN.prf' || /usr/local/bin/unison syncWAN.prf > /dev/null 2>&1\n" >> /var/cron/tabs/root
printf "*/10\t*\t*\t*\t*\t/bin/pgrep -f 'unison syncLAN.prf' || /usr/local/bin/unison syncLAN.prf > /dev/null 2>&1\n" >> /var/cron/tabs/root

################################################################################
# Finally, put a quick script into periodic that will grep for "Synchronization"
# in the prior day's logs and for review during the daily periodic email.
################################################################################

cat > /usr/local/etc/periodic/daily/800.unison << 'EOF'
#!/bin/sh
#
# /usr/local/etc/periodic/daily/800.unison 2014-01-15
#
# Check logs for yesterday's Unison runs
#

# If there is a global system configuration file, suck it in.
#
if [ -r /etc/defaults/periodic.conf ]
then
    . /etc/defaults/periodic.conf
    source_periodic_confs
fi

case "$daily_unison_checkup" in
    [Yy][Ee][Ss])
        # Run twice to show all then again to get exit statuses
        echo ""
        echo "Checking yesterday's Unison LAN syncs"
        bzgrep "Synchronization" /var/log/unison-syncLAN.log.0.bz2
        bzgrep "Synchronization" /var/log/unison-syncLAN.log.0.bz2 | \
                tail -2 | grep incomplete > /dev/null && lan=1 || lan=0
        echo ""
        echo "Checking yesterday's Unison WAN sync"
        bzgrep "Synchronization" /var/log/unison-syncWAN.log.0.bz2
        bzgrep "Synchronization" /var/log/unison-syncWAN.log.0.bz2 | \
                tail -2 | grep incomplete > /dev/null && wan=1 || wan=0

        # With an incomplete in either of the last 2 log entries, do 
        # bitwise OR to set rc to 1 
        rc=$(( $lan | $wan ))
        ;;
    *)
        rc=0
        ;;
esac

exit $rc
'EOF'
chmod 555 /usr/local/etc/periodic/daily/800.unison

echo 'daily_unison_checkup="YES"' >> /etc/periodic.conf

################################################################################
# ZFS-Stats
################################################################################

pkg install sysutils/zfs-stats

################################################################################
##----------------------------------------------------------------------------##
##                   Configure Host System ZFS and RAIDZ pool                 ##
##----------------------------------------------------------------------------##
################################################################################
# Enable ZFS
################################################################################

echo '' >> /etc/rc.conf
echo '# ZFS Support' >> /etc/rc.conf
echo 'zfs_enable="YES"' >> /etc/rc.conf
service zfs start

################################################################################
# Setup RAIDZ pool
# http://zfsguru.com/doc/bsd/zfs
# http://savagedlight.me/2012/07/15/freebsd-zfs-advanced-format/
################################################################################
# Search for all hard drives in the `dmesg`, confirm with `smartctl`
# Note the devices shown for later (i.e. /dev/ada0 and so on)
#
# If physical sector size matches the logical size below then you can likely
# skip to the `zpool create zfs` step.
#
# Performance using native 4K sectors should be faster in Advanced Format
# drives that use physical 4096K sector and fake a 512K sector to the OS. I
# tested repeated transfers of 13.5 gb of files from the main SSD onto a raid-z
# pool using each sector size.
#
# Mean write speed on a 512 byte pool  - 123.5 mb/sec
# Mean write speed on a 4096 byte pool - 134.5 mb/sec (9% faster)
################################################################################

dmesg | grep "sectors"
smartctl -a /dev/ada1 | grep "Sector Sizes"
smartctl -a /dev/ada2 | grep "Sector Sizes"
smartctl -a /dev/ada3 | grep "Sector Sizes"

################################################################################
# Erase any partition table on the planned pool drives by doing this.
#
# BE CAREFUL! Use the wrong output file (of=) and you may not be able boot. 
# In this case, the main OS was on the first drive (/dev/ada0) so this will
# clear the partition table of the remaining 3 drives.
################################################################################

dd if=/dev/zero of=/dev/ada1 bs=1m count=1
dd if=/dev/zero of=/dev/ada2 bs=1m count=1
dd if=/dev/zero of=/dev/ada3 bs=1m count=1

################################################################################
# Manually create the partition tables followed by a ZFS type (-t) partition
# beginning (-b) at the 1 mb mark and aligned (-a) to 4096 sized sectors. The
# label (-l) can be freely changed to whatever is intuitive.
#
# `smartctl -a /dev/ada1` will list all properties of the drive including
# serial number which is used below.
################################################################################

gpart create -s gpt ada1
gpart add -t freebsd-zfs -l bay2_WCAWZ0415892 -b 1M -a 4096 ada1
gpart create -s gpt ada2
gpart add -t freebsd-zfs -l bay3_WCAWZ0416712 -b 1M -a 4096 ada2
gpart create -s gpt ada3
gpart add -t freebsd-zfs -l bay4_WCAWZ0424121 -b 1M -a 4096 ada3

################################################################################
# Create gnop translation devices with 4096 sector sizes to force ZFS to
# ignore 512 byte block size simulated by the drives.
################################################################################

gnop create -S 4096 gpt/bay2_WCAWZ0415892
gnop create -S 4096 gpt/bay3_WCAWZ0416712
gnop create -S 4096 gpt/bay4_WCAWZ0424121 

################################################################################
# Build the ZFS array using the translations.
#
# The name of the array used here and for the remaining guide is 'zfs'.
################################################################################

zpool create zfs raidz /dev/gpt/bay2_WCAWZ0415892.nop /dev/gpt/bay3_WCAWZ0416712.nop /dev/gpt/bay4_WCAWZ0424121.nop

################################################################################
# Build datasets as needed
################################################################################

zfs create zfs/data
zfs set compression=lz4 zfs/data
zfs create zfs/homedirs
zfs create zfs/homedirs/public
zfs create zfs/homedirs/jason
zfs create zfs/homedirs/common_media
zfs create zfs/homedirs/common_assorted
zfs set compression=lz4 zfs/homedirs/common_assorted
zfs create zfs/homedirs/family_albums
zfs set dedup=on zfs/homedirs/family_albums
zfs create zfs/local
zfs create zfs/local/jails
zfs create zfs/local/jails/archive

################################################################################
# Export the zpool
################################################################################

zpool export zfs

################################################################################
# Trash the gnops
################################################################################

gnop destroy /dev/gpt/bay2_WCAWZ0415892.nop
gnop destroy /dev/gpt/bay3_WCAWZ0416712.nop
gnop destroy /dev/gpt/bay4_WCAWZ0424121.nop

################################################################################
# Re-import the zpool
################################################################################

zpool import -d /dev/gpt zfs

################################################################################
# Make sure the datasets set up are present and mounted
################################################################################

ls -l /zfs

################################################################################
# Verify ashift = 12 shows up
################################################################################

zdb 

################################################################################
# If all is well, enable reporting during daily updates and a weekly scrub.
################################################################################

echo 'daily_status_zfs_enable="YES"' >> /etc/periodic.conf
echo 'daily_scrub_zfs_enable="YES"' >> /etc/periodic.conf
echo 'daily_scrub_zfs_default_threshold="14"' >> /etc/periodic.conf

################################################################################
# Quick Rolling snapshot scripts for a month's worth of snapshot along with
# a permanent snapshot made on the first of every month. 
################################################################################

cat > /usr/local/etc/periodic/daily/900.rollingsnap << 'EOF'
#!/bin/sh
_30DAYSAGO=$(/bin/date -v -30d "+%Y%m%d")
_SNAPDATE=$(/bin/date "+%Y%m%d")

zfs destroy -r zfs/homedirs@$_30DAYSAGO-autodaily > /dev/null 2>&1
zfs snapshot -r zfs/homedirs@$_SNAPDATE-autodaily
'EOF'
chmod 555 /usr/local/etc/periodic/daily/900.rollingsnap

cat > /usr/local/etc/periodic/monthly/900.monthlysnap << 'EOF'
#!/bin/sh
_SNAPDATE=$(/bin/date "+%Y%m%d")
zfs rename -r zfs/homedirs@$_SNAPDATE-autodaily @$_SNAPDATE-automonthly > /dev/null 2>&1
'EOF'
chmod 555 /usr/local/etc/periodic/monthly/900.monthlysnap

################################################################################
##----------------------------------------------------------------------------##
##                    Configure Host System NFS Support                       ##
##----------------------------------------------------------------------------##
################################################################################
# Enable jail friendly NFS Support. NFSv4 is currently in use and the prior
# v2/v3 configurations are available but commented out.
################################################################################

touch /etc/exports
echo '' >> /etc/rc.conf
echo '# NFS V2/V3 Support' >> /etc/rc.conf
echo '#rpcbind_enable="YES"' >> /etc/rc.conf
echo '#rpcbind_flags="-h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '#nfs_server_enable="YES"' >> /etc/rc.conf
echo '#nfs_server_flags="-u -t -n 4 -h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '#mountd_enable="YES"' >> /etc/rc.conf
echo '#mountd_flags="-r -h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '#rpc_lockd_enable="YES"' >> /etc/rc.conf
echo '#rpc_lockd_flags="-h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '#rpc_statd_enable="YES"' >> /etc/rc.conf
echo '#rpc_statd_flags="-h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo '' >> /etc/rc.conf
echo '# NFSv4 Configuration' >> /etc/rc.conf
echo 'nfs_server_enable="YES"' >> /etc/rc.conf
echo 'nfsv4_server_enable="YES"' >> /etc/rc.conf
echo 'nfsuserd_enable="YES"' >> /etc/rc.conf
echo 'nfsuserd_flags="-domain mydomain.name"' >> /etc/rc.conf
echo 'nfs_server_flags="-u -t -n 4 -h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo 'rpcbind_enable="YES"' >> /etc/rc.conf
echo 'rpcbind_flags="-h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf
echo 'mountd_enable="YES"' >> /etc/rc.conf
echo 'mountd_flags="-r -h 10.100.102.2 -h 2001:123:4:5678::2"' >> /etc/rc.conf

################################################################################
# Configure the /etc/exports file for NFSv4 mounts. This won't be required if
# not using NFSv4 and only the next two commands would apply.
# http://forums.freebsd.org/showthread.php?p=135531
################################################################################

echo 'V4: / -sec=sys -network 10.100.0.0 -mask 255.255.0.0' >> /etc/exports

################################################################################
# Enable the 'sharenfs' property on the ZFS set and sharing of /usr/home
# Be aware of the security implications of using "-maproot=root".
#
# This is mainly to make sure root on the Linux NFS clients can read the
# .encfs6.xml file used by my EncFS home directors and easily change
# permissions.
################################################################################

zfs set sharenfs='-network 10.100.0.0 -mask 255.255.0.0 -maproot=root' zfs/homedirs

################################################################################
# Lock to NFSv4 only (optional)
################################################################################

echo '' >> /etc/sysctl.conf
echo '# NFSv4 Support Only' >> /etc/sysctl.conf
echo 'vfs.nfsd.server_min_nfsvers=4' >> /etc/sysctl.conf
sysctl vfs.nfsd.server_min_nfsvers=4

################################################################################
# Start & control NFS servers
#
# For NFSv4, all services can be completely stopped with:
# service nfsd stop ; service mountd stop ; service rpcbind stop ; service nfsuserd stop
# All services can be started with:
# service nfsd start
#
# For NFSv2/v3, all services can be completely stopped with:
# service statd stop ; service lockd stop ; service nfsd stop ; service mountd stop ; service rpcbind stop
# All services can be started with:
# service rpcbind start && service mountd start && service nfsd start && service lockd start
#
# For all NFS versions, if the '/etc/exports' is changed it can be refreshed by:
# service mountd reload
#
# Changing `zfs set sharenfs...` automatically does this and will update
# the '/etc/zfs/exports' file for you.
#
################################################################################

service nfsd start

################################################################################
##----------------------------------------------------------------------------##
##                      Poudriere PKG Build Configuration                     ##
##----------------------------------------------------------------------------##
################################################################################
# Set Up Poudriere PKG build system now that ZFS is fully setup.  All jails will
# be mapped to a local folder as their repository and the FTP jail will also 
# share this package repo to the internal network. Once testing for a jail is
# done, the idea is to migrate the packages and configuration into Poudriere and
# do pkg upgrade in the future rather than compiling software in each jail.
#
# Helpful Links:
# http://forums.freebsd.org/showthread.php?t=38859
# http://blog.etoilebsd.net/post/Home_made_pkgng_repo
# https://fossil.etoilebsd.net/poudriere/doc/trunk/doc/pkgng_repos.wiki
################################################################################

# Install Poudriere
pkg install ports-mgmt/poudriere

# Backup and change default configuration variables
cd /usr/local/etc && cp poudriere.conf.sample poudriere.conf
perl -pwi -e 's^#ZPOOL=tank^ZPOOL=zfs^g' poudriere.conf
perl -pwi -e 's^_PROTO_://_CHANGE_THIS_^ftp://ftp.freebsd.org^g' poudriere.conf
perl -pwi -e 's^BASEFS=/usr/local/poudriere^BASEFS=/zfs/poudriere^g' poudriere.conf

# Setup Poudriere to use the current host /usr/ports as the default
poudriere ports -c -F -f none -M /usr/ports -p default

# Setup 10.0-RELEASE build environment and update to the current patch level
poudriere jails -c -j 10_0amd64 -v 10.0-RELEASE -a amd64
poudriere jail -u -j 10_0amd64

# Setup make.conf variables for build jail
cat > /usr/local/etc/poudriere.d/10_0amd64-make.conf << 'EOF'
WITH_SSP_PORTS=yes
#WITH_PKGNG=yes #only uncommented on earlier releases than 10
php5_SET+=FPM
ffmpeg_SET+=RTMP X11GRAB FAAC LAME AMR_NB AMR_WB ASS
ca_root_nss_SET+=ETCSYMLINK
DEFAULT_VERSIONS= ruby=1.9 perl5=5.16
rubygem-passenger_UNSET+=APACHE22
rubygem-passenger_SET+=NGINX
nginx_SET+=PASSENGER
'EOF'

# Setup a package list of all ports used on host and in jails
cat > /zfs/poudriere/pkg_list << 'EOF'
########## Host and Jail programs ##########
ports-mgmt/portmaster
ports-mgmt/portdowngrade
ports-mgmt/poudriere
ports-mgmt/dialog4ports
ports-mgmt/portlint
devel/rclint
sysutils/tmux
shells/bash
lang/perl5.16
net/openntpd
mail/opensmtpd
sysutils/pstree
net-mgmt/iftop
sysutils/cmdwatch
sysutils/tree
sysutils/uptimed
sysutils/bsdstats
ports-mgmt/fbsdmon
security/clamav
editors/vim-lite
devel/checkbashisms
sysutils/freeipmi
sysutils/nut
security/logcheck
sysutils/panicmail
sysutils/smartmontools
net/rsync
net/unison-nox11
sysutils/zfs-stats
sysutils/ezjail
sysutils/monitorix
databases/p5-DBD-mysql
benchmarks/iperf
########## VPN/Proxy Jail ##########
security/openvpn
www/squid33
########## Serviio Jail ##########
net/serviio
graphics/dcraw
########## PHP5 and dependencies listed by-name for Serviio ##########
lang/php5
ftp/php5-curl
textproc/php5-xml
converters/php5-mbstring
devel/php5-json
textproc/php5-simplexml
textproc/php5-dom
########## Owncloud Jail##########
www/owncloud
########## Puppet/Puppet Dashboard Jail ##########
sysutils/puppet
sysutils/puppet-lint
devel/git
devel/ruby-gems
devel/rubygem-rake
converters/ruby-iconv
www/rubygem-passenger
www/nginx
sysutils/rubygem-bundler
textproc/libxslt
www/node
databases/sqlite3
databases/mariadb55-client
databases/postgresql93-client
########## MariaDB Jail ##########
databases/mariadb55-server
########## PostgreSQL Jail ##########
databases/postgresql93-server
########## LAN Service Jail ##########
net/isc-dhcp42-server
dns/bind99
ftp/tftp-hpa
'EOF'

# Start a bulk build of all ports in that list
poudriere bulk -f /zfs/poudriere/pkg_list -j 10_0amd64

# Allow host to install from Poudriere Repo
mkdir -p /usr/local/etc/pkg/repos
cat >> /usr/local/etc/pkg/repos/myrepo.conf << 'EOF'
myrepo: {
  url: "file:///zfs/poudriere/data/packages/10_0amd64-default",
}
'EOF'

# - To update a jail with latest security patches but stay at the same version:
# poudriere jail -u -j jailname
# - To upgrade to a newer version of FreeBSD, let's say from 9.0 to 9.1:
# poudriere jail -u -t 9.1-RELEASE -j jailname

################################################################################
##----------------------------------------------------------------------------##
##                    Host System Initial Jail Configuration                  ##
##----------------------------------------------------------------------------##
################################################################################
# Setup Ezjail scripts
#
# Type this to allow pings from inside the jail for testing purposes
# sysctl security.jail.allow_raw_sockets=1
################################################################################

pkg install sysutils/ezjail
ezjail-admin install
ezjail-admin update -P
chmod 700 /usr/jails

################################################################################
# Make SSH jail friendly by not allowing it to listen to all IP aliases
################################################################################

perl -pwi -e 's^#ListenAddress\ 0\.0\.0\.0^ListenAddress 10.100.102.2^g' /etc/ssh/sshd_config
perl -pwi -e 's^#ListenAddress\ ::^ListenAddress 2001:123:4:5678::2^g' /etc/ssh/sshd_config
service sshd restart

################################################################################
# Configure systemwide jail settings
################################################################################

# Enable jails in rc.conf
echo '' >> /etc/rc.conf
echo '# Ezjail Configuration' >> /etc/rc.conf
echo 'ezjail_enable="YES"' >> /etc/rc.conf
echo 'devfs_load_rulesets="YES"' >> /etc/rc.conf

# Put commented block for enabling raw sockets in sysctl.conf if needed later on
echo '' >> /etc/sysctl.conf
echo '# Uncomment to allow pings within a jail on upon reboot' >> /etc/sysctl.conf
echo '#security.jail.allow_raw_sockets=1' >> /etc/sysctl.conf

# FreeBSD 10+ devfs handling (rules must be numbers not names)
sed -i '' -e 's/# ezjail_devfs_ruleset="devfsrules_jail"/ezjail_devfs_ruleset="4"/' /usr/local/etc/ezjail.conf

# Define default jail stop command to ensure graceful shutdown of jails
echo 'ezjail_exec_stop="/bin/sh /etc/rc.shutdown"' >> /usr/local/etc/ezjail.conf

# Copy package repo to basejail and map default myrepo.conf to use it
mkdir -p /usr/jails/newjail/pkgrepo
mkdir -p /usr/jails/flavours/example/usr/local/etc/pkg/repos
cat >> /usr/jails/flavours/example/usr/local/etc/pkg/repos/myrepo.conf << 'EOF'
myrepo: {
  url: "file:///pkgrepo/10_0amd64-default",
}
'EOF'

# Copy vim dot files into jail
cp /etc/skel/.vimrc /usr/jails/newjail/etc/skel/
cp /etc/skel/.vimrc /usr/jails/newjail/root

# Copy .ssh directory for my user to the root user of each jail
cp -a /usr/home/jason/.ssh /usr/jails/newjail/root/
chown -R root:wheel /usr/jails/newjail/root/.ssh

# Enable logging in as root with SSH keys
perl -pwi -e 's^#PermitRootLogin no^PermitRootLogin without-password^g' /usr/jails/newjail/etc/ssh/sshd_config

# Disable useless cron entries to prevent them spamming syslog
perl -pwi -e 's^1,31\t0-5\t\*\t\*\t\*\troot\tadjkerntz -a^#1,31\t0-5\t\*\t\*\t\*\troot\tadjkerntz -a^' /usr/jails/newjail/etc/crontab

# Set up remaining for all jail's rc.conf
perl -pwi -e 's^# sshd_enable="YES"^sshd_enable="YES"^g' /usr/jails/flavours/example/etc/rc.conf
perl -pwi -e 's^syslogd_flags="-ss"^syslogd_flags="-s -v -v"^g' /usr/jails/flavours/example/etc/rc.conf
perl -pwi -e 's^#*.*\t\t\t\t\t\t\@loghost^*.*\t\t\t\t\t\t\@10.100.102.2^g' /usr/jails/newjail/etc/syslog.conf

cat >> /usr/jails/flavours/example/etc/rc.conf << 'EOF'

# Kernel Secure Level
kern_securelevel_enable="YES"
kern_securelevel="3"

# Clear Tmp
clear_tmp_enable="YES"
'EOF'

# Configure baseline periodic.conf for all jail templates.
# periodic.conf.local will be used for any things specific to one jail only.
cat >> /usr/jails/flavours/example/etc/periodic.conf << 'EOF'
##### General formatting for all jails
daily_show_success="NO"
security_show_success="NO"
daily_status_security_inline="YES"
weekly_status_security_inline="YES"
monthly_status_security_inline="YES"
##### Remove non-essential checks for all jails
daily_status_disks_enable="NO"
daily_status_rwho_enable="NO"
daily_status_security_kernelmsg_enable="NO"
##### Checks to enable for all jails
daily_clean_tmps_enable="YES"
daily_status_security_pkg_checksum_enable="YES"
'EOF'


################################################################################
# Quick script to display all periodic log files in all running jails.
################################################################################

cat > /usr/local/etc/periodic/daily/999.jail-periodic-daily << 'EOF'
#!/bin/sh
#
# /usr/local/etc/periodic/daily/999.jail-periodic-daily 2014-02-01
#

# If there is a global system configuration file, suck it in.
#
if [ -r /etc/defaults/periodic.conf ]
then
    . /etc/defaults/periodic.conf
    source_periodic_confs
fi

: ${daily_jail_periodic_ignore_length="0"}

case "$daily_jail_periodic_enable" in
    [Yy][Ee][Ss])
        paths=`jls | awk '{ print $4 }' | sort`
        for path in $paths; do
            if [ -f ${path}/var/log/daily.log ]; then
                LENGTH=`grep -vc newsyslog ${path}/var/log/daily.log`
                if [ $LENGTH -ne $daily_jail_periodic_ignore_length ]; then
                    echo ""
                    echo "daily periodic log in $path"
                    grep -v newsyslog ${path}/var/log/daily.log
                fi
            fi
        done && rc=1
        ;;
    *)
        rc=0
        ;;
esac

exit $rc
'EOF'

perl -p -e 's/daily/weekly/g' /usr/local/etc/periodic/daily/999.jail-periodic-daily > /usr/local/etc/periodic/weekly/999.jail-periodic-weekly
perl -p -e 's/daily/monthly/g' /usr/local/etc/periodic/daily/999.jail-periodic-daily > /usr/local/etc/periodic/monthly/999.jail-periodic-monthly

chmod 555 /usr/local/etc/periodic/daily/999.jail-periodic-daily
chmod 555 /usr/local/etc/periodic/weekly/999.jail-periodic-weekly
chmod 555 /usr/local/etc/periodic/monthly/999.jail-periodic-monthly

cat >> /etc/periodic.conf << 'EOF'
##### Show jail periodic checks in host periodic
daily_jail_periodic_enable="YES"
daily_jail_periodic_ignore_length="4"
weekly_jail_periodic_enable="YES"
weekly_jail_periodic_ignore_length="4"
monthly_jail_periodic_enable="YES"
'EOF'

################################################################################
# Create Jail flavours based on network segment 
################################################################################

cd /usr/jails/flavours/
cp -Rp example dmz
cp -Rp example lan

################################################################################
# DMZ-specific segment config
################################################################################

echo 'search pa-us.mydomain.name. nc-us.mydomain.name.' >> /usr/jails/flavours/dmz/etc/resolv.conf
echo 'nameserver 192.168.102.1' >> /usr/jails/flavours/dmz/etc/resolv.conf
echo 'nameserver 10.100.102.15' >> /usr/jails/flavours/dmz/etc/resolv.conf

################################################################################
# LAN-specific segment config 
################################################################################

echo 'search pa-us.mydomain.name. nc-us.mydomain.name.' >> /usr/jails/flavours/lan/etc/resolv.conf
echo 'nameserver 10.100.102.1' >> /usr/jails/flavours/lan/etc/resolv.conf
echo 'nameserver 10.100.102.15' >> /usr/jails/flavours/lan/etc/resolv.conf

################################################################################
#  WWW jail prerequisite - self signed keys used for testing
################################################################################

cat > /root/make-quicksha256-key.sh << 'EOF'
#!/bin/sh
mkdir -p /root/mycert
cd /root/mycert

mkdir -p /usr/local/etc/apache24/ssl.key
mkdir -p /usr/local/etc/apache24/ssl.crt
chmod 0400 /usr/local/etc/apache24/ssl.key
chmod 0400 /usr/local/etc/apache24/ssl.crt

openssl genrsa -des3 -out $1.key 1024
openssl req -new -x509 -nodes -sha256 -days 365 -key $1.key -out $1.crt

cp $1.key $1.key.orig
openssl rsa -in $1.key.orig -out $1.key

cp $1.key /usr/local/etc/apache24/
cp $1.crt /usr/local/etc/apache24/
chmod 0400 /usr/local/etc/apache24/$1.key
chmod 0400 /usr/local/etc/apache24/$1.crt
'EOF'
chmod u+x /root/make-quicksha256-key.sh
cd /root && ./make-quicksha256-key.sh www.mydomain.name

################################################################################
##----------------------------------------------------------------------------##
##                     PostgreSQL Jail Configuration                          ##
##----------------------------------------------------------------------------##
################################################################################
# Useful references:
# http://daemon-notes.com/articles/network/postgresql

ezjail-admin create -f lan pdbi.pa-us.mydomain.name 10.100.102.17,2001:123:4:5678::17
ezjail-admin config -f 1 pdbi.pa-us.mydomain.name
echo '/zfs/poudriere/data/packages /usr/jails/pdbi.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.pdbi_pa_us_mydomain_name
perl -pwi -e 's/parameters=""/parameters="allow.sysvipc=1"/g' /usr/local/etc/ezjail/pdbi_pa_us_mydomain_name
ezjail-admin console -f pdbi.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

# Install PostgreSQL with default options
pkg install postgresql93-server

# Enable and start PostgreSQL
echo 'postgresql_enable="YES"' >> /etc/rc.conf.local
service postgresql initdb
service postgresql start

echo 'daily_pgsql_backup_enable="YES"' >> /etc/periodic.conf.local
echo 'daily_pgsql_vacuum_enable="YES"' >> /etc/periodic.conf.local

su - pgsql
createuser -sdrP admin

echo "host all all 10.100.102.11/32 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host all all 10.100.102.12/32 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host all all 2001:123:4:5678::11/128 md5" >> /usr/local/pgsql/data/pg_hba.conf
echo "host all all 2001:123:4:5678::12/128 md5" >> /usr/local/pgsql/data/pg_hba.conf
service postgresql reload

################################################################################
##----------------------------------------------------------------------------##
##                       MariaDB Jail Configuration                           ##
##----------------------------------------------------------------------------##
################################################################################

ezjail-admin create -f lan mdbi.pa-us.mydomain.name 10.100.102.18,2001:123:4:5678::18
ezjail-admin config -f 1 mdbi.pa-us.mydomain.name
echo '/zfs/poudriere/data/packages /usr/jails/mdbi.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.mdbi_pa_us_mydomain_name
ezjail-admin console -f mdbi.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

# Install MariaDB 5.5
pkg install mariadb55-server

# Creating and Configurating a MariaDB Database for Puppet Dashboard
# Tuning:
# Copy one of the default config files and change the max packet size to allow
# for the 17 MB data rows that Dashboard can occasionally send.

cp /usr/local/share/mysql/my-huge.cnf /var/db/mysql/my.cnf
patch /var/db/mysql/my.cnf << 'EOF'
32c32,33
< max_allowed_packet = 1M
---
> # Allow 32MB packet Size for ~17MB size rows Puppet dashboard sends
> max_allowed_packet = 32M
'EOF'

# Enable and start MariaDB
echo 'mysql_enable="YES"' >> /etc/rc.conf.local
service mysql-server start

# Prepare Database for use by running the secure installation.
# Choose a root password and answer yes to all questions.
mysql_secure_installation

# Login to MariaDB and create appropriate tables for Dashboard and Monitorix
mysql -u root -p
CREATE DATABASE dashboard_production CHARACTER SET utf8;
CREATE DATABASE dashboard_development CHARACTER SET utf8;
CREATE DATABASE dashboard_test CHARACTER SET utf8;
CREATE USER 'dashboard'@'10.100.102.11' IDENTIFIED BY 'dashboard_password';
GRANT ALL PRIVILEGES ON dashboard_production.* TO 'dashboard'@'10.100.102.11';
GRANT ALL PRIVILEGES ON dashboard_development.* TO 'dashboard'@'10.100.102.11';
GRANT ALL PRIVILEGES ON dashboard_test.* TO 'dashboard'@'10.100.102.11';
CREATE USER 'dashboard'@'10.100.102.12' IDENTIFIED BY 'dashboard_password';
GRANT ALL PRIVILEGES ON dashboard_production.* TO 'dashboard'@'10.100.102.12';
GRANT ALL PRIVILEGES ON dashboard_development.* TO 'dashboard'@'10.100.102.12';
GRANT ALL PRIVILEGES ON dashboard_test.* TO 'dashboard'@'10.100.102.12';
CREATE USER 'monitorix'@'10.100.102.18' IDENTIFIED BY 'monitorix_password';
flush privileges;
quit;

################################################################################
##----------------------------------------------------------------------------##
##     Puppet with Puppet Dashboard on Nginx/Passenger Jail Configuration     ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://docs.puppetlabs.com/guides/installation.html
# https://help.ubuntu.com/11.04/serverguide/puppet.html
#
# All configuration files will be under /usr/local/etc/puppet
# All state files are under /var/puppet
################################################################################

ezjail-admin create -f lan apps1.pa-us.mydomain.name 10.100.102.11,2001:123:4:5678::11
ezjail-admin config -f 1 apps1.pa-us.mydomain.name
mkdir -p /usr/jails/apps1.pa-us.mydomain.name/usr/local/www/poudriere
mkdir -p /usr/jails/apps1.pa-us.mydomain.name/usr/local/www/pkg
mkdir -p /usr/jails/apps1.pa-us.mydomain.name/zfs/data
echo '/zfs/poudriere/data/logs /usr/jails/apps1.pa-us.mydomain.name/usr/local/www/poudriere nullfs ro 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /usr/jails/apps1.pa-us.mydomain.name/usr/local/www/pkg nullfs ro 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /usr/jails/apps1.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
echo '/zfs/data /usr/jails/apps1.pa-us.mydomain.name/zfs/data nullfs rw 0 0' >> /etc/fstab.apps1_pa_us_mydomain_name
ezjail-admin console -f apps1.pa-us.mydomain.name
passwd

# Note that the backup jail will follow the majority of the same settings for redundancy
# and testing purposes.

ezjail-admin create -f lan apps2.pa-us.mydomain.name 10.100.102.12,2001:123:4:5678::12
ezjail-admin config -f 1 apps2.pa-us.mydomain.name
mkdir -p /usr/jails/apps2.pa-us.mydomain.name/usr/local/www/poudriere
mkdir -p /usr/jails/apps2.pa-us.mydomain.name/usr/local/www/pkg
mkdir -p /usr/jails/apps2.pa-us.mydomain.name/zfs/data
echo '/zfs/poudriere/data/logs /usr/jails/apps2.pa-us.mydomain.name/usr/local/www/poudriere nullfs ro 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /usr/jails/apps2.pa-us.mydomain.name/usr/local/www/pkg nullfs ro 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /usr/jails/apps2.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
echo '/zfs/data /usr/jails/apps2.pa-us.mydomain.name/zfs/data nullfs rw 0 0' >> /etc/fstab.apps2_pa_us_mydomain_name
ezjail-admin console -f apps2.pa-us.mydomain.name
passwd

# Both apps1 and apps2 will get the same steps from this point on with very minor changes
# between each other.

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

# Installing Dependencies:  Install Puppet, Git, Nginx, and Ruby Components

pkg install puppet rubygem-puppet-lint git nginx rubygem-rake ruby19-iconv rubygem-passenger rubygem-bundler mariadb55-client libxslt node sqlite3 postgresql93-client

# At this point, Puppet needs to be started so that all its SSL keys can be 
# generated. This gives the chance to test that Puppet does work before anything
# else gets stacked on as well as ensures the SSL keys referenced by Nginx's
# config file are in place before that step.

mkdir -p /usr/local/etc/puppet/manifests/
touch /usr/local/etc/puppet/manifests/site.pp
service puppetmaster onestart

# On the secondary apps server/Puppet, set the appropriate ca_server directive
# run the agent manually to generate appropriate keys.

echo "[main]" >> /usr/local/etc/puppet/puppet.conf
echo "ca = false" >> /usr/local/etc/puppet/puppet.conf
echo "ca_server = apps1.pa-us.mydomain.name" >> /usr/local/etc/puppet/puppet.conf
echo "dns_alt_names = puppet.pa-us.mydomain.name,puppet" >> /usr/local/etc/puppet/puppet.conf
puppet agent --test --waitforcert 10

# On the CA
puppet cert --allow-dns-alt-names sign apps2.pa-us.mydomain.name


# With initial setup of the Puppetmaster done, a RACK file that Nginx will use
# to start the Ruby application will be needed. Copy/paste the example.

mkdir -p /usr/local/etc/puppet/rack/public
cat > /usr/local/etc/puppet/rack/config.ru << 'EOF'
# Trimmed back FreeBSD Version of https://github.com/puppetlabs/puppet/blob/master/ext/rack/files/config.ru
$0 = "master"
require 'socket'
host = Socket.gethostname
ARGV << "--config_file_name" << "puppet.conf.#{host}"
ARGV << "--rack"
ARGV << "--confdir" << "/usr/local/etc/puppet"
ARGV << "--vardir" << "/var/puppet"
require 'puppet/util/command_line'
run Puppet::Util::CommandLine.new.execute
'EOF'
chown -R puppet:puppet /usr/local/etc/puppet/rack

# Installing Puppet Dashboard
# Procedures follow Puppet Lab's documentation at:  http://docs.puppetlabs.com/dashboard/manual/1.2
# Follow along with their documentation for a more detailed description of what is being done.

# Installing from Git
# Clone community supported Dashboard 2.0 instead of than Puppetlab's 1.2
cd /usr/local/share
git clone git://github.com/sodabrew/puppet-dashboard.git

# Manually create the 'puppet-dashboard' user
pw groupadd -n puppet-dashboard -g 800
pw useradd -n puppet-dashboard -c "Puppet Dashboard,,," -u 800 -g puppet-dashboard -s /usr/sbin/nologin

# Configuring Dashboard
# database.yml:  Copy the example database YAML file. Update with database information.
cd /usr/local/share/puppet-dashboard/config
cp database.yml.example database.yml
patch database.yml << 'EOF'
49c49
<   password:
---
>   password: dashboard_password
51c51,52
<   adapter: postgresql
---
>   adapter: mysql2
>   host: 10.100.102.18
56c57
<   password:
---
>   password: dashboard_password
58c59,60
<   adapter: postgresql
---
>   adapter: mysql2
>   host: 10.100.102.18
63c65
<   password:
---
>   password: dashboard_password
65,66c67,68
<   adapter: postgresql
< 
---
>   adapter: mysql2
>   host: 10.100.102.18
'EOF'
chmod 640 database.yml

# settings.yml:  Copy the example settings YAML file. No changes needed.
cd /usr/local/share/puppet-dashboard/config
cp settings.yml.example settings.yml
chmod 640 settings.yml

# Fix shebang line for ENC script
sed -i '' -e 's/#! \/usr\/bin\/ruby/#!\/usr\/local\/bin\/ruby/' /usr/local/share/puppet-dashboard/bin/external_node

# Install gems required in the 'Gemfile' via the Rubygem Bundler
cd /usr/local/share/puppet-dashboard
bundle install --path vendor/bundle

# Generate secret_token
# Cleanup any errors and the default token after generating the new one.
echo "secret_token: `bundle exec rake secret`" >> config/settings.yml
vi config/settings.yml

# Before going into a production environment, Dashboard 2.0 must precompile
# assets for production.
env RAILS_ENV=production bundle exec rake assets:precompile

# Creating and Configuring a MariaDB Database - Preparing Schema
# At this point the database was already installed in another jail with some blank tables.
# We need to run rake to finish the process with the database structure needed.
cd /usr/local/share/puppet-dashboard
env RAILS_ENV=production bundle exec rake db:setup
env RAILS_ENV=development bundle exec rake db:setup

# Fix permissions on everything
mkdir /usr/local/share/puppet-dashboard/certs
chgrp -R puppet-dashboard /usr/local/share/puppet-dashboard
find /usr/local/share/puppet-dashboard/certs -type d -exec chmod g+w {} \;
find /usr/local/share/puppet-dashboard/certs -type f -exec chmod g+w {} \;
find /usr/local/share/puppet-dashboard/tmp -type d -exec chmod g+w {} \;
find /usr/local/share/puppet-dashboard/tmp -type f -exec chmod g+w {} \;
find /usr/local/share/puppet-dashboard/log -type d -exec chmod g+w {} \;
find /usr/local/share/puppet-dashboard/log -type f -exec chmod g+w {} \;

# Testing That Dashboard is Working
# Run Dashboard using Ruby's built-in WEBrick server to validate functionality.
# It will be available at http://dashboard:3000 and use the RAILS_ENV=development database.
cd /usr/local/share/puppet-dashboard
su -m puppet-dashboard -c 'bundle exec rails server'

# Configuring Puppet
# All agent nodes have to be configured to submit reports to the master.
# The master has to be configured to send reports to Dashboard.

# Example:
#   puppet.conf (on each agent)
#     [agent]
#       report = true
#
#   puppet.conf (on puppet master)
#     [master]
#       reports = store, http
#       reporturl = http://dashboard.example.com:3000/reports/upload
#       node_terminus = exec
#       external_nodes = /usr/bin/env PUPPET_DASHBOARD_URL=http://dashboard.example.com:3000 /usr/local/share/puppet-dashboard/bin/external_node
#

# Testing Puppet's Connection to Dashboard
# From a Puppet agent, run `puppet agent --test`.  A new background task should show in the 
# Dashboard UI at http://dashboard:3000

# Starting and Managing Delayed Job Workers
#
# Using the monitor script
# Dashboard ships a worker process maanager under script/delayed_job.  It can manually start
# delayed jobs via the following command
# cd /usr/local/share/puppet-dashboard
# su -m puppet-dashboard -c 'env RAILS_ENV=production bundle exec script/delayed_job -p dashboard -n 2 -m start'

# Rather than manually triggering background workers, this rc script will accomplish the same
# thing and ensure the background jobs get started on the next reboot.

cat > /usr/local/etc/rc.d/dashboard_workers << 'EOF'
#!/bin/sh

# PROVIDE: dashboard_workers
# REQUIRE: LOGIN
# KEYWORD: shutdown

. /etc/rc.subr

name=dashboard_workers
rcvar=dashboard_workers_enable

load_rc_config $name

# By default dashboard_workers uses flags '-n 1' for 1 worker.  This should be 
# adjusted to the number of CPU cores.
dashboard_workers_enable=${dashboard_workers_enable:-"NO"}
dashboard_workers_flags=${dashboard_workers_flags:-"-n 1"}
# The default rails environment is set to production
dashboard_workers_env=${dashboard_workers_env:-"/usr/bin/env PATH=${PATH}:/usr/local/bin RAILS_ENV=production"}
# The default user is set to puppet-dashboard and install location is set to
# /usr/local/share/puppet-dashboard.
dashboard_workers_user=${dashboard_workers_user:-"puppet-dashboard"}
dashboard_workers_chdir=${dashboard_workers_chdir:-"/usr/local/share/puppet-dashboard"}

# All commands call the same function and strip the fast|one|quiet prefix
# to deliver to the bundler.
extra_commands="reload run zap status"
reload_cmd="f_dashboard_workers reload"
restart_cmd="f_dashboard_workers restart"
run_cmd="f_dashboard_workers run"
start_cmd="f_dashboard_workers start"
status_cmd="f_dashboard_workers status"
stop_cmd="f_dashboard_workers stop"
zap_cmd="f_dashboard_workers zap"

# Use the function's ARVG $1 as the bundler program's '-m' flag
f_dashboard_workers()
{
    cd $dashboard_workers_chdir && \
    su -m "$dashboard_workers_user" \
        -c "${dashboard_workers_env} bundle exec script/delayed_job ${rc_flags} -p dashboard -m $1" || \
    echo "Failed to $1 dashboard_workers"
}

run_rc_command "$1"
'EOF'
chmod 555 /usr/local/etc/rc.d/dashboard_workers

# With that in place, we need to override the defaults and enable the script along with
# setting '-n 2' workers to match the number of processor cores and ensure it's ready
# for a production workload. 

echo 'dashboard_workers_enable="YES"' >> /etc/rc.conf.local
echo 'dashboard_workers_flags="-n 2"' >> /etc/rc.conf.local
service dashboard_workers start

# Running Dashboard in a Production-Quality Server

# Configuring Nginx and Passenger
# Nginx/Passenger Instructions and Configuration was derived from these two examples 
# that refer to how to set it up on CentOS
#
# http://z0mbix.github.io/blog/2012/03/01/use-nginx-and-passenger-to-power-your-puppet-master/
# http://www.watters.ws/mediawiki/index.php/Configure_puppet_master_using_nginx_and_mod_passenger

cat > /usr/local/etc/nginx/nginx.conf << 'EOF'
user  www www;
worker_processes  2;
error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    passenger_root /usr/local/lib/ruby/gems/1.9/gems/passenger-4.0.29;
    passenger_ruby /usr/local/bin/ruby;
    passenger_max_pool_size 10;
    passenger_pool_idle_time 300;
    #passenger_spawn_method direct; # Uncomment on Ruby 1.8 for ENC to work

    include       mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    tcp_nopush    on;
    keepalive_timeout  65;
    tcp_nodelay        on;

    server {
        listen       80 default_server;
        server_name  dashboard.pa-us.mydomain.name dashboard;

        passenger_enabled on;
        passenger_user             puppet-dashboard;
        passenger_group            puppet-dashboard;

        access_log /var/log/nginx/dashboard_access.log;
        root /usr/local/share/puppet-dashboard/public;

        auth_basic             "Puppet Dashboard";
        auth_basic_user_file   htpasswd;
        allow 10.100.102.11;
        allow 10.100.102.12; 
        allow 2001:123:4:5678::11;
        allow 2001:123:4:5678::12;
        deny all;
        satisfy any;
    }
    server {
        listen       80;
        server_name  poudriere.pa-us.mydomain.name poudriere;

        access_log /var/log/nginx/poudriere_access.log;
        root /usr/local/www/poudriere/bulk;
        autoindex    on;
    }
    server {
        listen       80;
        server_name  pkg.pa-us.mydomain.name pkg;

        access_log /var/log/nginx/pkg_access.log;
        root /usr/local/www/pkg;
        autoindex    on;
    }
    server {
        listen       8140 ssl;
        server_name  puppet.pa-us.mydomain.name puppet;

        passenger_enabled          on;
        passenger_set_cgi_param    HTTP_X_CLIENT_DN $ssl_client_s_dn;
        passenger_set_cgi_param    HTTP_X_CLIENT_VERIFY $ssl_client_verify;
        passenger_user             puppet;
        passenger_group            puppet;

        access_log                 /var/log/nginx/puppet_access.log;
        root                       /usr/local/etc/puppet/rack/public;
        # ssl_certifcate name must match host installed on (apps1|apps2)
        ssl_certificate            /var/puppet/ssl/certs/apps1.pa-us.mydomain.name.pem;
        ssl_certificate_key        /var/puppet/ssl/private_keys/apps1.pa-us.mydomain.name.pem;
        # copy ca certificates from apps1 -> apps2
        ssl_crl                    /var/puppet/ssl/ca/ca_crl.pem;
        ssl_client_certificate     /var/puppet/ssl/certs/ca.pem;
        ssl_ciphers                SSLv2:-LOW:-EXPORT:RC4+RSA;
        ssl_prefer_server_ciphers  on;
        ssl_verify_client          optional;
        ssl_verify_depth           1;
        ssl_session_cache          shared:SSL:128m;
        ssl_session_timeout        5m;
    }
}
'EOF'

# Create the log directory to prevent issues on startup.
mkdir /var/log/nginx

# Enable a daily log file rotation via newsyslog.conf
printf "/var/log/nginx/*.log\t\t\t644  7\t   *    @T00  JG    /var/run/nginx.pid  30\n" >> /etc/newsyslog.conf

# Create a password file for auth_basic login
echo "dashboard:`openssl passwd -crypt PUT_PASSWORD_HERE`" >> /usr/local/etc/nginx/htpasswd
chmod 640 /usr/local/etc/nginx/htpasswd
chown root:www /usr/local/etc/nginx/htpasswd

# If the puppetmaster service is still running from earlier testing, stop it now
# Mark appropriate optiosn for hostname specific 
service puppetmaster onestop
echo 'puppetmaster_enable="NO"' >> /etc/rc.conf.local
echo 'puppetmaster_rundir="/var/run/puppet"' >> /etc/rc.conf.local

echo 'puppetmaster_flags="--config_file_name=puppet.conf.apps1.pa-us.mydomain.name --rundir=${puppetmaster_rundir}"' >> /etc/rc.conf.local
# or
echo 'puppetmaster_flags="--config_file_name=puppet.conf.apps2.pa-us.mydomain.name --rundir=${puppetmaster_rundir}"' >> /etc/rc.conf.local

# Enable nginx service and start it. At this point basic functionality is online.
echo 'nginx_enable="YES"' >> /etc/rc.conf.local
service nginx start

# Configuring Dashboard
# Advanced Features

# Generating Certs and Connecting to the Puppet Master
# With separate Puppet/Dashboard systems the `puppet cert sign dashboard` will
# be on the Puppetmaster.

cd /usr/local/share/puppet-dashboard
su -m puppet-dashboard -c 'bundle exec rake cert:create_key_pair'
su -m puppet-dashboard -c 'bundle exec rake cert:request'
puppet cert sign dashboard
su -m puppet-dashboard -c 'bundle exec rake cert:retrieve'

# Enabling Inventory Support
# EXAMPLE:
#   auth.conf (on puppet master)
#   path /facts
#   auth yes
#   method find, search
#   allow dashboard

# Enabling the Filebucket Viewer
# EXAMPLE
#   site.pp (on puppet master)
# filebucket { "main":
#   server => "{your puppet master}",
#   path => false,
# }
#
# File { backup => "main" }

# Go back and add the line for Inventory Support.
# While I'm here, also increase reporting cutoff to deal with laptop/powered off systems getting
# flagged unresponsive.
cd /usr/local/share/puppet-dashboard/config
patch settings.yml << 'EOF'
35c35
< enable_inventory_service: false
---
> enable_inventory_service: true
45c45
< use_file_bucket_diffs: false
---
> use_file_bucket_diffs: true
54c54
< no_longer_reporting_cutoff: 3600
---
> no_longer_reporting_cutoff: 259200
'EOF'

# With all the updates made, restart so that it takes effect.
service nginx restart

# For future maintenance, periodic jobs to prune old reports and run DB optimization.
mkdir -p /usr/local/etc/periodic/monthly
cat > /usr/local/etc/periodic/monthly/clean_dashboard_database.sh << 'EOF'
#!/bin/sh
cd /usr/local/share/puppet-dashboard && \
    echo "Pruning Old Reports from Puppet Dashboard Database" && \
    /usr/bin/su -m puppet-dashboard -c '/usr/local/bin/bundle exec rake RAILS_ENV=production reports:prune upto=3 unit=mon'  && \
    echo "Optimizing Database" && \
    /usr/bin/su -m puppet-dashboard -c '/usr/local/bin/bundle exec rake RAILS_ENV=production db:raw:optimize' 
'EOF'
chmod 755 /usr/local/etc/periodic/monthly/clean_dashboard_database.sh

mkdir -p /usr/local/etc/periodic/weekly
cat > /usr/local/etc/periodic/weekly/clean_puppet_reports.sh << 'EOF'
#!/bin/sh
echo "Pruning Puppetmaster Reports greater than 7 days old"
echo -n "  Reports Removed:"
find /var/puppet/reports -type f -mtime 7 | xargs rm -v | wc -l
'EOF'
chmod 755 /usr/local/etc/periodic/weekly/clean_puppet_reports.sh

################################################################################
##----------------------------------------------------------------------------##
##                          FTP Jail Configuration                            ##
##----------------------------------------------------------------------------##
################################################################################
# Anonymous FTP suited for a few quick internal uses only.
#
# Modified from:
# http://157.85.32.130/freebsd/servers/ftp/ftpd.html
# http://www5.us.freebsd.org/doc/handbook/network-ftp.html
################################################################################

ezjail-admin create -f lan ftp.pa-us.mydomain.name 10.100.102.13,2001:123:4:5678::13
ezjail-admin config -f 1 ftp.pa-us.mydomain.name
mkdir -p /usr/jails/ftp.pa-us.mydomain.name/var/ftp/pkgrepo
echo '/zfs/poudriere/data/packages /usr/jails/ftp.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.ftp_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /usr/jails/ftp.pa-us.mydomain.name/var/ftp/pkgrepo nullfs ro 0 0' >> /etc/fstab.ftp_pa_us_mydomain_name
ezjail-admin console -f ftp.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

# Add anonymous user
pw useradd -m -n ftp -c "Anonymous FTP User,,," -s /sbin/nologin -d "/var/ftp"

# Remove the skel directory created above and create default ftp structure
cd /var/ftp
rm -r .*
mkdir etc pub incoming
chown -R root:ftp /var/ftp/
chmod 755 etc pub
chown -R nobody incoming
chmod 5777 incoming
echo "ftp" >> /etc/ftpchroot
touch /var/log/ftpd

# Finalize and activate
echo 'ftpd_enable="YES"' >> /etc/rc.conf.local
echo 'ftpd_flags="-ASll"' >> /etc/rc.conf.local
service ftpd start

################################################################################
##                       Serviio Jail Configuration                           ##
################################################################################
# Helpful links:
# http://forums.nas4free.org/viewtopic.php?f=79&t=1796
# http://luffare.blogspot.com/2011/04/dlna-server-on-freebsd-82-using-serviio.html
# http://wiki.serviio.org/doku.php?id=build_ffmpeg_linux
################################################################################

ezjail-admin create -f lan serviio.pa-us.mydomain.name 10.100.102.14,2001:123:4:5678::14
ezjail-admin config -f 1 serviio.pa-us.mydomain.name
mkdir -p /usr/jails/serviio.pa-us.mydomain.name/zfs/homedirs/common_media
mkdir -p /usr/jails/serviio.pa-us.mydomain.name/zfs/homedirs/common_photo_albums
echo '/zfs/homedirs/common_media /usr/jails/serviio.pa-us.mydomain.name/zfs/homedirs/common_media nullfs ro 0 0' >> /etc/fstab.serviio_pa_us_mydomain_name
echo '/zfs/homedirs/common_photo_albums /usr/jails/serviio.pa-us.mydomain.name/zfs/homedirs/common_photo_albums nullfs ro 0 0' >> /etc/fstab.serviio_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /usr/jails/serviio.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.serviio_pa_us_mydomain_name
ezjail-admin console -f serviio.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

# Setup FFMPEG options per guidance in the helpful links then start Serviio build.
# cd /usr/ports/multimedia/ffmpeg && make config WITH_RTMP=YES WITH_X11GRAB=YES WITH_FAAC=YES WITH_LAME=YES WITH_AMR_NB=YES WITH_AMR_WB=YES WITH_ASS=YES
# portmaster net/serviio graphics/dcraw
pkg install serviio dcraw

# Fix home directory for Serviio then enable and start it.
mkdir -p /var/db/serviio/home/plugins
pw usermod dlna -m -d /var/db/serviio/home
echo 'serviio_enable="YES"' >> /etc/rc.conf.local
echo serviio_args=\'-Dserviio.advertisementDuration=\"15\"\' >> /etc/rc.conf.local
service serviio start

########### Option 1: PHP5 FPM listener for Nginx App Jail Frontend ############
#cd /usr/ports/lang/php5 && make config WITH_FPM=YES
#portmaster lang/php5 ftp/php5-curl textproc/php5-xml converters/php5-mbstring devel/php5-json textproc/php5-simplexml textproc/php5-dom
pkg install php5 php5-curl php5-xml php5-mbstring php5-json php5-simplexml php5-dom

sed -i '' -e 's/;listen.allowed_clients = 127.0.0.1/listen.allowed_clients = 10.100.102.11,10.100.102.12/' /usr/local/etc/php-fpm.conf

cd /tmp && fetch https://github.com/SwoopX/Web-UI-for-Serviio/archive/Serviio-1.3.zip
mkdir -p /usr/local/www
unzip -d /usr/local/www Serviio-1.3.zip

# rsync the entire /usr/local/www/Web-UI-for-Serviio-Serviio-1.3 directory
# to both apps servers and add this to their nginx.conf

    server {
        listen 80;
        server_name serviio-console.pa-us.mydomain.name serviio-console;

        access_log /var/log/nginx/serviio_console_access.log;
        root /usr/local/www/Web-UI-for-Serviio-Serviio-1.3;

        location / {
            index index.php;
        }
        location ~ \.php$ {
            fastcgi_pass 10.100.102.14:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME /usr/local/www/Web-UI-for-Serviio-Serviio-1.3$fastcgi_script_name;
            include fastcgi_params;
        }
        location ~ /\.ht {
            deny all;
        }
    }

echo 'php_fpm_enable="YES"' >> /etc/rc.conf.local
service php-fpm start

################### Option 2: Standalone Apache/PHP Stack ######################
# Setup Apache 2.4
portmaster www/apache24

# Setup PHP5 configuration then start port build with WebUI dependencies
cd /usr/ports/lang/php5 && make config WITH_APACHE=YES
portmaster lang/php5 ftp/php5-curl textproc/php5-xml converters/php5-mbstring devel/php5-json textproc/php5-simplexml textproc/php5-dom

# Fetch the current WebUI. Update if a new version is available on the Serviio wiki.
# http://wiki.serviio.org/doku.php?id=phpwebui
cd /tmp && fetch https://github.com/SwoopX/Web-UI-for-Serviio/archive/Serviio-1.3.zip 
unzip -d /usr/local/www/apache24/data/ Serviio-1.3.zip

# Setup httpd.conf file
cd /usr/local/etc/apache24; cp httpd.conf httpd.conf.original
patch httpd.conf << 'EOF'
185c185
< ServerAdmin you@example.com
---
> ServerAdmin jason.unovitch@gmail.com
194c194
< #ServerName www.example.com:80
---
> ServerName serviio.pa-us.mydomain.name:80
218,219c218,219
< DocumentRoot "/usr/local/www/apache24/data"
< <Directory "/usr/local/www/apache24/data">
---
> DocumentRoot "/usr/local/www/apache24/data/Web-UI-for-Serviio-Serviio-1.3"
> <Directory /usr/local/www/apache24/data/Web-UI-for-Serviio-Serviio-1.3>
252c252
<     DirectoryIndex index.html
---
>     DirectoryIndex index.html index.php
380a381,382
>     AddType application/x-httpd-php .php
>     AddType application/x-httpd-php-source .phps
'EOF'

# Secure the httpd-default.conf file
cd /usr/local/etc/apache24/extra; cp httpd-default.conf httpd-default.conf.original
patch httpd-default.conf << 'EOF'
55c55
< ServerTokens Full
---
> ServerTokens Prod
'EOF'

# Finalize and activate
echo 'apache24_enable="YES"' >> /etc/rc.conf.local
apachectl start

# Now bring up http://serviio/ in a web browser for configuration

################################################################################
##----------------------------------------------------------------------------##
##                        OpenVPN Jail Configuration                          ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://forums.freebsd.org/showthread.php?t=22143
################################################################################

# Prep work on host
# Create tunnel and enable routing
ifconfig tun create
sysctl net.inet.ip.forwarding=1

# Make tunnel and routing persistent
echo '' >> /etc/rc.conf
echo '# OpenVPN server' >> /etc/rc.conf
echo 'cloned_interfaces="tun"' >> /etc/rc.conf
echo 'gateway_enable="YES"' >> /etc/rc.conf

# Enable devfs ruleset similar to ezjail default but allowing access to tun0
cat >> /etc/devfs.rules << 'EOF'

# Rules for VPN jail
#
[devfsrules_jail_with_vpn=5]
add include $devfsrules_hide_all
add include $devfsrules_unhide_basic
add include $devfsrules_unhide_login
add path tun0 unhide
add path zfs unhide
'EOF'

# Finally, create vpn jail
ezjail-admin create -f dmz vpn.pa-us.mydomain.name 192.168.102.19,10.100.102.19,2001:123:4567:890::19,2001:123:4:5678::19

# Provide access to nullfs mounted pkg repo
echo '/zfs/poudriere/data/packages /usr/jails/vpn.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.vpn_pa_us_mydomain_name

# Set to use devfs rules and assign interface IP on jail start
sed -i '' -e 's/devfs_ruleset="4"/devfs_ruleset="5"/' /usr/local/etc/ezjail/vpn_pa_us_mydomain_name
echo 'export jail_vpn_pa_us_mydomain_name_exec_prestart0="/sbin/ifconfig tun0 inet 10.100.103.1/32 10.100.103.2"' >> /usr/local/etc/ezjail/vpn_pa_us_mydomain_name
echo 'export jail_vpn_pa_us_mydomain_name_exec_prestart1="/sbin/route add -net 10.100.103.0/24 10.100.103.2"' >> /usr/local/etc/ezjail/vpn_pa_us_mydomain_name

# Place keys from host's CA into jail
mkdir -p /usr/jails/vpn.pa-us.mydomain.name/usr/local/etc/openvpn/keys/
cp /usr/local/etc/openvpn-ca/keys/vpn.* /usr/jails/vpn.pa-us.mydomain.name/usr/local/etc/openvpn/keys/
cp /usr/local/etc/openvpn-ca/keys/ta.key /usr/jails/vpn.pa-us.mydomain.name/usr/local/etc/openvpn/keys/
cp /usr/local/etc/openvpn-ca/keys/ca.crt /usr/jails/vpn.pa-us.mydomain.name/usr/local/etc/openvpn/keys/
cp /usr/local/etc/openvpn-ca/keys/dh2048.pem /usr/jails/vpn.pa-us.mydomain.name/usr/local/etc/openvpn/keys/

# Start vpn jail and handle initial configuration
ezjail-admin console -f vpn.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

# OpenVPN installation and configuration 
pkg install openvpn

pw groupadd -n _openvpn -g 1194
pw useradd -n _openvpn -c "OpenVPN daemon,,," -d "/var/empty" -u 1194 -g _openvpn -s /usr/sbin/nologin

cat > /usr/local/etc/openvpn/unovpnsvr.conf << 'EOF'
port 1194
proto udp
dev tun0
ifconfig-noexec
route-noexec

server 10.100.103.0 255.255.255.0
push "route 192.168.102.0 255.255.255.0"
push "route 10.100.102.0 255.255.255.0"
push "route 10.100.82.0 255.255.255.0"
push "dhcp-option DNS 192.168.102.1"
push "dhcp-option DOMAIN pa-us.mydomain.name"
push "dhcp-option DOMAIN nc-us.mydomain.name"
#push "redirect-gateway def1"

ca /usr/local/etc/openvpn/keys/ca.crt
cert /usr/local/etc/openvpn/keys/vpn.pa-us.mydomain.name.crt
key /usr/local/etc/openvpn/keys/vpn.pa-us.mydomain.name.key
dh /usr/local/etc/openvpn/keys/dh2048.pem
tls-auth /usr/local/etc/openvpn/keys/ta.key 0
ifconfig-pool-persist /var/tmp/openvpn-pool.txt

user _openvpn
group _openvpn
comp-lzo
persist-key
persist-tun
keepalive 20 60
cipher AES-256-CBC
verb 3
mute 20
'EOF'

echo 'openvpn_enable="YES"' >> /etc/rc.conf.local
echo 'openvpn_configfile="/usr/local/etc/openvpn/unovpnsvr.conf"' >> /etc/rc.conf.local
service openvpn start

# Also install squid for VPN clients to use
pkg install www/squid33

# Patch configure to allow monitorix to monitor, enable cache dir, and
# munge internal LAN info sent out to servers
patch /usr/local/etc/squid/squid.conf << 'EOF'
7a8,10
> acl jailhost src 10.100.102.19
> acl jailhost src 192.168.102.19
> 
37a41
> http_access allow jailhost manager
62c66
< #cache_dir ufs /var/squid/cache/squid 100 16 256
---
> cache_dir ufs /var/squid/cache/squid 100 16 256
73a78,80
> 
> forwarded_for off
> visible_hostname squid.lan
'EOF'

# Fix permissions and enable
chgrp squid /usr/local/etc/squid/squid.conf
echo 'squid_enable="YES"' >> /etc/rc.conf.local

# Initialize
squid -z

# Start Squid
service squid start

################################################################################
##----------------------------------------------------------------------------##
##            Lan Service Jail Configuration (DHCPD/NAMED/TFTPD)              ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://dan.langille.org/2013/08/18/creating-a-freebsd-jail-to-run-dhcp-and-dns/
# http://www.wonkity.com/~wblock/docs/html/pxe.html
# https://forums.freebsd.org/viewtopic.php?&t=33849

# Enable devfs ruleset similar to ezjail default but allowing access to bpf
# device required by DHCPD
cat >> /etc/devfs.rules << 'EOF'

# Rules for DHCP jail
#
[devfsrules_jail_with_bpf=6]
add include $devfsrules_hide_all
add include $devfsrules_unhide_basic
add include $devfsrules_unhide_login
add path 'bpf*' unhide
add path zfs unhide
'EOF'

ezjail-admin create -f lan lanser.pa-us.mydomain.name 10.100.102.15,2001:123:4:5678::15
ezjail-admin config -f 1 lanser.pa-us.mydomain.name
mkdir -p /usr/jails/lanser.pa-us.mydomain.name/zfs/data
perl -pwi -e 's/parameters=""/parameters="allow.raw_sockets=1"/g' /usr/local/etc/ezjail/lanser_pa_us_mydomain_name
echo '/zfs/poudriere/data/packages /usr/jails/lanser.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.lanser_pa_us_mydomain_name
echo '/zfs/data /usr/jails/lanser.pa-us.mydomain.name/zfs/data nullfs rw 0 0' >> /etc/fstab.lanser_pa_us_mydomain_name
sed -i '' -e 's/devfs_ruleset="4"/devfs_ruleset="6"/' /usr/local/etc/ezjail/lanser_pa_us_mydomain_name
ezjail-admin console -f lanser.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

# Install BIND
pkg install dns/bind99
echo 'named_enable="YES"' >> /etc/rc.conf.local
## Put config files in place from desktop
# scp configs/named.conf root@lanser:/etc/namedb/
# scp -r configs/myzonefiles root@lanser:/usr/local/etc/namedb/dynamic
chown bind /usr/local/etc/namedb/dynamic/*
service named start

# Install TFTPD
pkg install ftp/tftp-hpa
# Get syslinux-6.01 (6.02 didn't boot from local hard drive properly when tested)
cd /root
fetch --no-verify-peer https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.01.zip
mkdir syslinux-6.01
unzip -d syslinux-6.01 syslinux-6.01.zip
rm syslinux-6.01.zip
# Populate tftpboot directory with bare minimum files needed from syslinux package
mkdir -p /zfs/data/tftpboot/images
mkdir -p /zfs/data/tftpboot/pxelinux.cfg
cp -v \
	syslinux-6.01/bios/com32/chain/chain.c32 \
	syslinux-6.01/bios/gpxe/gpxelinux.0 \
	syslinux-6.01/bios/com32/elflink/ldlinux/ldlinux.c32 \
	syslinux-6.01/bios/com32/lib/libcom32.c32 \
	syslinux-6.01/bios/core/lpxelinux.0 \
	syslinux-6.01/bios/memdisk/memdisk \
	syslinux-6.01/bios/com32/menu/menu.c32 \
	syslinux-6.01/bios/com32/modules/reboot.c32 \
	syslinux-6.01/bios/com32/menu/vesamenu.c32 \
	/zfs/data/tftpboot
# Get Ubuntu netboot installer
fetch http://archive.ubuntu.com/ubuntu/dists/saucy/main/installer-amd64/current/images/netboot/netboot.tar.gz
tar xvzf netboot.tar.gz
mv ubuntu-installer /zfs/data/tftpboot/
# Get mfsBSD images for testing
cd /zfs/data/tftpboot/images
fetch http://mfsbsd.vx.sk/files/images/10/i386/mfsbsd-10.0-RELEASE-i386.img
fetch http://mfsbsd.vx.sk/files/images/10/amd64/mfsbsd-10.0-RELEASE-amd64.img
# Populate default configuration using the above
cat > /zfs/data/tftpboot/pxelinux.cfg/default << 'EOF'
ui vesamenu.c32
menu title Network Boot Menu
timeout 100

label localboot
  menu label Boot from Hard Drive
  kernel chain.c32
  append hd0

menu begin ubuntu
	menu title Network Install Ubuntu 13.10 to Hard Disk
	include ubuntu-installer/amd64/pxelinux.cfg/default
menu end

label mfsbsd64
  menu label Load mfsBSD 10.0-RELEASE amd64
  kernel memdisk
  initrd images/mfsbsd-10.0-RELEASE-amd64.img raw

label mfsbsd32
  menu label Load mfsBSD 10.0-RELEASE i386
  kernel memdisk
  initrd images/mfsbsd-10.0-RELEASE-i386.img raw

label reboot
  menu label Reboot
  kernel reboot.c32
'EOF'
# Enable and start tftpd
echo 'tftpd_enable="YES"' >> /etc/rc.conf.local
echo 'tftpd_flags="-p -s /zfs/data/tftpboot -B 1024"' >> /etc/rc.conf.local
service tftpd start

################################################################################
##----------------------------------------------------------------------------##
##                       Owncloud Jail Configuration                          ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://blog.gurb.org/index.php?post/2012/03/07/Installation-de-OwnCloud-sous-FreeBSD-9.02 
# https://wiki.archlinux.org/index.php/Owncloud
#############################################################################

ezjail-admin create -f dmz www1.pa-us.mydomain.name 192.168.102.13,2001:123:4567:890::13
ezjail-admin config -f 2 www1.pa-us.mydomain.name
echo '/zfs/poudriere/data/packages /usr/jails/www1.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.www1_pa_us_mydomain_name
mkdir /usr/jails/www1.pa-us.mydomain.name/usr/local/etc/apache24/
cp /root/mycert/www.mydomain.name.* /usr/jails/www1.pa-us.mydomain.name/usr/local/etc/apache24/
ezjail-admin console -f www1.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

# Assign Apache module build to the PHP5 config then start the full build.
# cd /usr/ports/lang/php5 && make config WITH_APACHE=YES
# portmaster www/apache22 lang/php5 www/owncloud
pkg install apache24 php5 owncloud

# Setup httpd.conf file
cd /usr/local/etc/apache24; cp httpd.conf httpd.conf.original
patch httpd.conf << 'EOF'
151c151
< #LoadModule rewrite_module libexec/apache24/mod_rewrite.so
---
> LoadModule rewrite_module libexec/apache24/mod_rewrite.so
185c185
< ServerAdmin you@example.com
---
> ServerAdmin jason.unovitch@gmail.com
194c194
< #ServerName www.example.com:80
---
> ServerName www.mydomain.name:80
218,219c218,219
< DocumentRoot "/usr/local/www/apache24/data"
< <Directory "/usr/local/www/apache24/data">
---
> DocumentRoot "/usr/local/www/owncloud"
> <Directory /usr/local/www/owncloud>
239c239
<     AllowOverride None
---
>     AllowOverride All
252c252
<     DirectoryIndex index.html
---
>     DirectoryIndex index.html index.php
380a381,382
>     AddType application/x-httpd-php .php
>     AddType application/x-httpd-php-source .phps
'EOF'

# Secure the httpd-default.conf file
cd /usr/local/etc/apache24/extra; cp httpd-default.conf httpd-default.conf.original
patch httpd-default.conf << 'EOF'
55c55
< ServerTokens Full
---
> ServerTokens Prod
'EOF'

# Setup httpd-ssl.conf file
cd /usr/local/etc/apache24/extra; cp httpd-ssl.conf httpd-ssl.conf.original
patch httpd-ssl.conf << 'EOF'
86,88c86,88
< DocumentRoot "/usr/local/www/apache24/data"
< ServerName www.example.com:443
< ServerAdmin you@example.com
---
> DocumentRoot "/usr/local/www/owncloud"
> ServerName www.mydomain.name:443
> ServerAdmin jason.unovitch@gmail.com
106c106
< SSLCertificateFile "/usr/local/etc/apache24/server.crt"
---
> SSLCertificateFile "/usr/local/etc/apache24/www.mydomain.name.crt"
116c116
< SSLCertificateKeyFile "/usr/local/etc/apache24/server.key"
---
> SSLCertificateKeyFile "/usr/local/etc/apache24/www.mydomain.name.key"
'EOF'

# Finalize and activate
chmod u+w /usr/local/www/owncloud/.htaccess
echo 'apache24_enable="YES"' >> /etc/rc.conf.local
apachectl start

################################################################################
##----------------------------------------------------------------------------##
##                       iRedMail Jail Configuration                          ##
##----------------------------------------------------------------------------##
################################################################################
# References:
# http://www.iredmail.org/install_iredmail_on_freebsd.html
# http://iredmail.com/wiki/index.php?title=Install/iRedMail/FreeBSD.Jail
################################################################################

ezjail-admin create -f dmz ms1.pa-us.mydomain.name 192.168.102.11,2001:123:4567:890::11
ezjail-admin config -f 2 ms1.pa-us.mydomain.name
echo '/zfs/poudriere/data/packages /usr/jails/ms1.pa-us.mydomain.name/pkgrepo nullfs ro 0 0' >> /etc/fstab.ms1_pa_us_mydomain_name
ezjail-admin console -f ms1.pa-us.mydomain.name
passwd

pkg install bash portmaster tmux vim-lite pstree cmdwatch tree
echo '#WITH_PKGNG=yes #only uncommented on earlier releases than 10' >> /etc/make.conf
echo 'WITH_SSP_PORTS=yes' >> /etc/make.conf

fetch https://bitbucket.org/zhb/iredmail/downloads/iRedMail-0.8.5.tar.bz2
tar xjf iRedMail-0.8.5.tar.bz2
cd iRedMail-0.8.5

cd pkgs && bash get_all.sh
cd .. && LOCAL_ADDRESS='192.168.102.11' bash iRedMail.sh

# If any port builds get hung up, rebuild manually and mark as completed
# Example with OpenLDAP is shown below.
cd /basejail/usr/ports/net/openldap24-server && make clean && make install
cd -
echo "export status_install_port_net_openldap24server='DONE' # Manually installed" >> ".status"
LOCAL_ADDRESS='192.168.102.11' bash iRedMail.sh

################################################################################
##----------------------------------------------------------------------------##
##                                   Cleanup                                  ##
##----------------------------------------------------------------------------##
################################################################################

## Set Kernel Secure Level
echo '' >> /etc/rc.conf
echo '# Kernel Secure Level' >> /etc/rc.conf
echo 'kern_securelevel_enable="YES"' >> /etc/rc.conf
echo 'kern_securelevel="1"' >> /etc/rc.conf
sysctl kern.securelevel=1

## Enable Auditing
echo '' >> /etc/rc.conf
echo '# Auditing' >> /etc/rc.conf
echo 'auditd_enable="YES"' >> /etc/rc.conf
service auditd start

## Enable auditdistd
# Examples from https://wiki.freebsd.org/auditdistd
# Passwords/hashes/fingerprints from wiki example, change as needed

## Server side only
# Generate certs
openssl req -x509 -nodes -newkey rsa:4096 -days 1825 -batch -out /etc/security/auditdistd.cert.pem -keyout /etc/security/auditdistd.key.pem
chmod 0600 /etc/security/auditdistd.key.pem /etc/security/auditdistd.cert.pem
chown root:wheel /etc/security/auditdistd.key.pem /etc/security/auditdistd.cert.pem

# Get Fingerprints
openssl x509 -in /etc/security/auditdistd.cert.pem -noout -fingerprint -sha256 | awk -F '[ =]' '{printf("%s=%s\n", $1, $3)}'

# Generate Shared Password
dd if=/dev/urandom bs=32 count=1 | openssl base64 | cut -b -32

# Create /etc/security/auditdistd.conf configuration file
cat > /etc/security/auditdistd.conf << 'EOF'
receiver {
	listen "10.100.102.2:7878"
	host "xju-rtr" {
		remote "10.100.82.1"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
	host "xts-rtr" {
		remote "10.100.102.1"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'

## Client side only
sed -i '' -e 's/dist:off/dist:on/g' /etc/security/audit_control

cat > /etc/security/auditdistd.conf << 'EOF'
sender {
	source "10.100.82.1"
	host "xju-rtr" {
		remote "10.100.102.2:7878"
		fingerprint "SHA256=8F:0A:FC:8A:3D:09:80:AF:D9:AA:38:CC:8A:86:53:E6:8F:B6:1C:55:30:14:D7:F9:AA:8B:3E:73:CD:F5:76:2B"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'
cat > /etc/security/auditdistd.conf << 'EOF'
sender {
	source "10.100.102.1"
	host "xts-rtr" {
		remote "10.100.102.2:7878"
		fingerprint "SHA256=8F:0A:FC:8A:3D:09:80:AF:D9:AA:38:CC:8A:86:53:E6:8F:B6:1C:55:30:14:D7:F9:AA:8B:3E:73:CD:F5:76:2B"
		password "YjwbK69H5cEBlhcT+eJpJgJTFn5B2SrG"
	}
}
'EOF'

## Both sides
# Because the configuration file contains passwords, set its permissions properly:
chmod 600 /etc/security/auditdistd.conf
chown root:wheel /etc/security/auditdistd.conf

echo 'auditdistd_enable="YES"' >> /etc/rc.conf
service auditdistd start

################################################################################
##----------------------------------------------------------------------------##
##                             Maintenance Notes                              ##
##----------------------------------------------------------------------------##
################################################################################
# Keep the ports tree in check! Every time you log in and are about to install
# ports, be sure to update the ports tree on both the host and jailed system!
################################################################################

portsnap fetch update
ezjail-admin update -P

################################################################################
# OR - Shorter version...
#
# Put the portsnap cron into good use. Just run `portsup` with this script to
# update ports with what has already been downloaded during the weekly cron.
# It will unpack the most recent portsnap saved by `portsnap cron` in
# /var/db/portsnap into both the host system and jail system ports trees.
################################################################################

cat > /usr/local/sbin/portsup << 'EOF'
#!/bin/sh
# Just a short script to quickly put the portsnap cron right into use
portsnap update
[ -e "/usr/jails/basejail/usr/ports/.portsnap.INDEX" ] \
    && portsnap -p "/usr/jails/basejail/usr/ports" update
'EOF'
chmod 555 /usr/local/sbin/portsup

################################################################################
# Binary Updates with an Ezjail update immediately after.
# http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/updating-upgrading-freebsdupdate.html
################################################################################

# Small Updates, I.E. 9.1-RELEASE to 9.1-RELEASE-p6
freebsd-update fetch
sed -i '' -e 's/kern_securelevel/#kern_securelevel/' /etc/rc.conf
sed -i '' -e 's/ezjail_enable/#ezjail_enable/' /etc/rc.conf
shutdown -r now
freebsd-update install
ezjail-admin update -u
poudriere jail -u -j 91amd64
sed -i '' -e 's/#kern_securelevel/kern_securelevel/' /etc/rc.conf
sed -i '' -e 's/#ezjail_enable/ezjail_enable/' /etc/rc.conf
service ezjail start
sysctl kern.securelevel=1

# Big Updates, I.E. 9.2-RELEASE to 10.0-RELEASE
## Backup Old /etc
cp -Rp /etc /root/etc.old
## Run freebsd-update to get the latest patches
freebsd-update upgrade -r 10.0-RELEASE
## If using a heightened securelevel, lower it and reboot
sed -i '' -e 's/kern_securelevel/#kern_securelevel/' /etc/rc.conf
shutdown -r now
## First `freebsd-update install` and reboot for new kernel
freebsd-update install
shutdown -r now
## Second `freebsd-update install` for new userland
freebsd-update install
shutdown -r now
## Poudriere start - Fetch new Poudriere build jail for new release - Jump ahead if using public packages
poudriere jails -c -j 10_0amd64 -v 10.0-RELEASE -a amd64
## If upgrading within a release, move currently built packages and make.conf
mv /usr/local/etc/poudriere.d/91amd64-make.conf /usr/local/etc/poudriere.d/92amd64-make.conf
mv /zfs/poudriere/data/packages/91amd64-default /zfs/poudriere/data/packages/92amd64-default
## If upgrading to a new major release, copy current make.conf only, rebuild and reinstall all packages
cp /usr/local/etc/poudriere.d/92amd64-make.conf /usr/local/etc/poudriere.d/10_0amd64-make.conf
poudriere bulk -f /zfs/poudriere/pkg_list -j 10_0amd64
## Update local repository files to point to the new release
find / -name myrepo.conf -exec sed -i '' -e 's/92amd64/10_0amd64/' {} \;
## Delete old build jail
poudriere jail -d -j 91amd64
## Poudriere end - continue from here if just using public packages
pkg-static upgrade -fy
pkg autoremove
## Third `freebsd-update install` to cleanup old libs (major version upgrades only)
freebsd-update install
shutdown -r now
## The host is completely upgraded to the new version and all cleanup is done
## Jails can be updated anytime after upgrading the host.
## Archive original jail set
ezjail-admin stop
ezjail-admin archive -A
## Update basejail to the new release it see already via `uname` and give it the source release
ezjail-admin update -U -s 9.2-RELEASE-p3
## For upgrading to 9.2, open vipw and immediatly save so mergemaster recognizes
## the new auditdistd user
vipw
## For upgrading from 9->10, update deprecated variables to the new format
find /usr/jails -name periodic.conf -exec sed -i '' -e 's/daily_status_security_ipfwdenied_enable/security_status_ipfwdenied_enable/;s/daily_status_security_ipfwlimit_enable/security_status_ipfwlimit_enable/;s/daily_status_security_kernelmsg_enable/security_status_kernelmsg_enable/' {} \;
## For upgrading from 9->10, update all jail devfs rules to use integers rather than strings
sed -i '' -e 's/"devfsrules_jail"/"4"/;s/"devfsrules_jail_with_vpn"/"5"/;s/"devfsrules_jail_with_bpf"/"6"/' /usr/local/etc/ezjail/*
## Run mergemaster on each jail
mergemaster -p /usr/jails/newjail
mergemaster -UF -D /usr/jails/newjail
mergemaster -p /usr/jails/jail1
mergemaster -UF -D /usr/jails/jail1 # and continue on for each jail
## Major release upgrades only - disable starting any services dependent on old libraries and start ezjail
find /usr/jails -name rc.conf.local -exec sed -i '' -e 's/YES/NO/' {} \;
service ezjail start
## Log in to each jail and perform full upgrades on each jail for a new major release
## ssh or `ezjail-admin console <jail>` for each one
pkg-static upgrade -fy
pkg autoremove
## Back to the host; stop, archive, and start again the newly upgraded jails
service ezjail stop
ezjail-admin archive -A
service ezjail start
## Enable and raise securelevel if in use
sed -i '' -e 's/#kern_securelevel/kern_securelevel/' /etc/rc.conf
sysctl kern.securelevel=1

################################################################################
# CONSOLE USE ONLY
# Major system updates short of kernel updates, go to single-user mode
################################################################################

shutdown now
# Perform maintenance, then back to multiuser mode
return
